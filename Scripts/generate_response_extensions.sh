#!/bin/bash

# ===================================================
# Swift Protocol Conformance Modifier
# ===================================================
#
# Purpose:
# --------
# This script automatically adds protocol conformance to Response and Error 
# structures in Swift files generated by Protocol Buffers. It's designed to 
# post-process protobuf-generated Swift files to add required protocol 
# conformance without manual intervention.
#
# Modifications:
# -------------
# 1. Adds 'ResultWithError' protocol to Response structures
# 2. Adds 'ResponseError' protocol to Error structures
# 3. Adds 'isNull' property to Error structures with implementation
#
# Example Input:
# -------------
# public struct SomeCommand {
#     public struct Response {
#         public struct Error {
#             public var code: ErrorCode
#             public var description_p: String
#         }
#     }
# }
#
# Example Output:
# --------------
# public struct SomeCommand {
#     public struct Response: ResultWithError {
#         public struct Error: ResponseError {
#             public var isNull: Bool { code == .null && description_p.isEmpty }
#             public var code: ErrorCode
#             public var description_p: String
#         }
#     }
# }
#
# Usage:
# ------
# ./script.sh <path-to-swift-file>
# or
# ./script.sh (will prompt for file path)
#
# Technical Details:
# ----------------
# - Uses sed for efficient in-place file modification
# - Handles both macOS and Linux sed variants
# - No temporary files or backups created
# - Processes structures maintaining original indentation
#
# Requirements:
# ------------
# - Bash shell
# - sed command line tool
# - Read/Write permissions for target file
#
# Note:
# ----
# This script is designed for Protocol Buffer generated Swift files
# that follow a specific structure. It assumes:
# - Response structures are direct children of command structures
# - Error structures are within Response structures
# - Each Error structure has 'code' and 'description_p' properties
#
# Warning:
# -------
# This script modifies files in place without backup.
# Use version control or create manual backups before running.
#
# Created: January 22, 2025
# For: Anytype Swift codebase
# ===================================================

modify_swift_file() {
    local file_path="$1"
    
    if [ ! -f "$file_path" ]; then
        echo "Error: File not found: $file_path"
        return 1
    fi
    
    if [ ! -w "$file_path" ]; then
        echo "Error: File is not writable: $file_path"
        return 1
    fi

    # Use sed for fast in-place modification
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS version
        sed -i '' \
            -e 's/\(public struct Response\) {/\1: ResultWithError {/' \
            -e 's/\(public struct Error\) {/\1: ResponseError {\
          public var isNull: Bool { code == .null \&\& description_p.isEmpty }/' \
            "$file_path"
    else
        # Linux/Unix version
        sed -i \
            -e 's/\(public struct Response\) {/\1: ResultWithError {/' \
            -e 's/\(public struct Error\) {/\1: ResponseError {\
          public var isNull: Bool { code == .null \&\& description_p.isEmpty }/' \
            "$file_path"
    fi

    echo "File modified successfully: $file_path"
}

if [ $# -eq 1 ]; then
    file_path="$1"
else
    read -p "Enter the path to your Swift file: " file_path
fi

if [ -z "$file_path" ]; then
    echo "Error: No file path provided"
    exit 1
fi

modify_swift_file "$file_path"
