// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
extension Anytype_Event.Block {
    public struct Dataview {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum SliceOperation: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// not used
        case none // = 0
        case add // = 1
        case move // = 2
        case remove // = 3
        case replace // = 4
        case UNRECOGNIZED(Int)

        public init() {
          self = .none
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .none
          case 1: self = .add
          case 2: self = .move
          case 3: self = .remove
          case 4: self = .replace
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .none: return 0
          case .add: return 1
          case .move: return 2
          case .remove: return 3
          case .replace: return 4
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      /// sent when the view have been changed or added
      public struct ViewSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        /// view id, client should double check this to make sure client doesn't switch the active view in the middle
        public var viewID: String {
          get {return _storage._viewID}
          set {_uniqueStorage()._viewID = newValue}
        }

        public var view: Anytype_Model_Block.Content.Dataview.View {
          get {return _storage._view ?? Anytype_Model_Block.Content.Dataview.View()}
          set {_uniqueStorage()._view = newValue}
        }
        /// Returns true if `view` has been explicitly set.
        public var hasView: Bool {return _storage._view != nil}
        /// Clears the value of `view`. Subsequent reads from it will return its default value.
        public mutating func clearView() {_uniqueStorage()._view = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      public struct ViewUpdate {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var viewID: String = String()

        public var filter: [Anytype_Event.Block.Dataview.ViewUpdate.Filter] = []

        public var relation: [Anytype_Event.Block.Dataview.ViewUpdate.Relation] = []

        public var sort: [Anytype_Event.Block.Dataview.ViewUpdate.Sort] = []

        public var fields: Anytype_Event.Block.Dataview.ViewUpdate.Fields {
          get {return _fields ?? Anytype_Event.Block.Dataview.ViewUpdate.Fields()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        public var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        public mutating func clearFields() {self._fields = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Fields {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var type: Anytype_Model_Block.Content.Dataview.View.TypeEnum = .table

          public var name: String = String()

          /// Relation used for cover in gallery
          public var coverRelationKey: String = String()

          /// Hide icon near name
          public var hideIcon: Bool = false

          /// Gallery card size
          public var cardSize: Anytype_Model_Block.Content.Dataview.View.Size = .small

          /// Image fits container
          public var coverFit: Bool = false

          /// Group view by this relationKey
          public var groupRelationKey: String = String()

          /// Enable backgrounds in groups
          public var groupBackgroundColors: Bool = false

          /// Limit of objects shown in widget
          public var pageLimit: Int32 = 0

          /// Id of template object set default for the view
          public var defaultTemplateID: String = String()

          /// Default object type that is chosen for new object created within the view
          public var defaultObjectTypeID: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Filter {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var operation: Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation? = nil

          public var add: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add {
            get {
              if case .add(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add()
            }
            set {operation = .add(newValue)}
          }

          public var remove: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove {
            get {
              if case .remove(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove()
            }
            set {operation = .remove(newValue)}
          }

          public var update: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update {
            get {
              if case .update(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update()
            }
            set {operation = .update(newValue)}
          }

          public var move: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move {
            get {
              if case .move(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move()
            }
            set {operation = .move(newValue)}
          }

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum OneOf_Operation: Equatable {
            case add(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add)
            case remove(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove)
            case update(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update)
            case move(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move)

          #if !swift(>=4.1)
            public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation) -> Bool {
              // The use of inline closures is to circumvent an issue where the compiler
              // allocates stack space for every case branch when no optimizations are
              // enabled. https://github.com/apple/swift-protobuf/issues/1034
              switch (lhs, rhs) {
              case (.add, .add): return {
                guard case .add(let l) = lhs, case .add(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.remove, .remove): return {
                guard case .remove(let l) = lhs, case .remove(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.update, .update): return {
                guard case .update(let l) = lhs, case .update(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.move, .move): return {
                guard case .move(let l) = lhs, case .move(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              default: return false
              }
            }
          #endif
          }

          public struct Add {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var items: [Anytype_Model_Block.Content.Dataview.Filter] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Remove {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Update {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var id: String = String()

            public var item: Anytype_Model_Block.Content.Dataview.Filter {
              get {return _item ?? Anytype_Model_Block.Content.Dataview.Filter()}
              set {_item = newValue}
            }
            /// Returns true if `item` has been explicitly set.
            public var hasItem: Bool {return self._item != nil}
            /// Clears the value of `item`. Subsequent reads from it will return its default value.
            public mutating func clearItem() {self._item = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _item: Anytype_Model_Block.Content.Dataview.Filter? = nil
          }

          public struct Move {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public init() {}
        }

        public struct Relation {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var operation: Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation? = nil

          public var add: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add {
            get {
              if case .add(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add()
            }
            set {operation = .add(newValue)}
          }

          public var remove: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove {
            get {
              if case .remove(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove()
            }
            set {operation = .remove(newValue)}
          }

          public var update: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update {
            get {
              if case .update(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update()
            }
            set {operation = .update(newValue)}
          }

          public var move: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move {
            get {
              if case .move(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move()
            }
            set {operation = .move(newValue)}
          }

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum OneOf_Operation: Equatable {
            case add(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add)
            case remove(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove)
            case update(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update)
            case move(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move)

          #if !swift(>=4.1)
            public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation) -> Bool {
              // The use of inline closures is to circumvent an issue where the compiler
              // allocates stack space for every case branch when no optimizations are
              // enabled. https://github.com/apple/swift-protobuf/issues/1034
              switch (lhs, rhs) {
              case (.add, .add): return {
                guard case .add(let l) = lhs, case .add(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.remove, .remove): return {
                guard case .remove(let l) = lhs, case .remove(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.update, .update): return {
                guard case .update(let l) = lhs, case .update(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.move, .move): return {
                guard case .move(let l) = lhs, case .move(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              default: return false
              }
            }
          #endif
          }

          public struct Add {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var items: [Anytype_Model_Block.Content.Dataview.Relation] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Remove {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Update {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var id: String = String()

            public var item: Anytype_Model_Block.Content.Dataview.Relation {
              get {return _item ?? Anytype_Model_Block.Content.Dataview.Relation()}
              set {_item = newValue}
            }
            /// Returns true if `item` has been explicitly set.
            public var hasItem: Bool {return self._item != nil}
            /// Clears the value of `item`. Subsequent reads from it will return its default value.
            public mutating func clearItem() {self._item = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _item: Anytype_Model_Block.Content.Dataview.Relation? = nil
          }

          public struct Move {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public init() {}
        }

        public struct Sort {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var operation: Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation? = nil

          public var add: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add {
            get {
              if case .add(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add()
            }
            set {operation = .add(newValue)}
          }

          public var remove: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove {
            get {
              if case .remove(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove()
            }
            set {operation = .remove(newValue)}
          }

          public var update: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update {
            get {
              if case .update(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update()
            }
            set {operation = .update(newValue)}
          }

          public var move: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move {
            get {
              if case .move(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move()
            }
            set {operation = .move(newValue)}
          }

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum OneOf_Operation: Equatable {
            case add(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add)
            case remove(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove)
            case update(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update)
            case move(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move)

          #if !swift(>=4.1)
            public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation) -> Bool {
              // The use of inline closures is to circumvent an issue where the compiler
              // allocates stack space for every case branch when no optimizations are
              // enabled. https://github.com/apple/swift-protobuf/issues/1034
              switch (lhs, rhs) {
              case (.add, .add): return {
                guard case .add(let l) = lhs, case .add(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.remove, .remove): return {
                guard case .remove(let l) = lhs, case .remove(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.update, .update): return {
                guard case .update(let l) = lhs, case .update(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.move, .move): return {
                guard case .move(let l) = lhs, case .move(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              default: return false
              }
            }
          #endif
          }

          public struct Add {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var items: [Anytype_Model_Block.Content.Dataview.Sort] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Remove {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Update {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var id: String = String()

            public var item: Anytype_Model_Block.Content.Dataview.Sort {
              get {return _item ?? Anytype_Model_Block.Content.Dataview.Sort()}
              set {_item = newValue}
            }
            /// Returns true if `item` has been explicitly set.
            public var hasItem: Bool {return self._item != nil}
            /// Clears the value of `item`. Subsequent reads from it will return its default value.
            public mutating func clearItem() {self._item = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _item: Anytype_Model_Block.Content.Dataview.Sort? = nil
          }

          public struct Move {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public init() {}
        }

        public init() {}

        fileprivate var _fields: Anytype_Event.Block.Dataview.ViewUpdate.Fields? = nil
      }

      public struct ViewDelete {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// view id to remove
        public var viewID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct ViewOrder {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// view ids in new order
        public var viewIds: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct SourceSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var source: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct OldRelationDelete {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation key to remove
        public var relationKey: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// sent when the dataview relation has been changed or added
      public struct OldRelationSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation key to update
        public var relationKey: String = String()

        public var relation: Anytype_Model_Relation {
          get {return _relation ?? Anytype_Model_Relation()}
          set {_relation = newValue}
        }
        /// Returns true if `relation` has been explicitly set.
        public var hasRelation: Bool {return self._relation != nil}
        /// Clears the value of `relation`. Subsequent reads from it will return its default value.
        public mutating func clearRelation() {self._relation = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _relation: Anytype_Model_Relation? = nil
      }

      public struct RelationDelete {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation key to remove
        public var relationKeys: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// sent when the dataview relation has been changed or added
      public struct RelationSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation id to update
        public var relationLinks: [Anytype_Model_RelationLink] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct GroupOrderUpdate {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var groupOrder: Anytype_Model_Block.Content.Dataview.GroupOrder {
          get {return _groupOrder ?? Anytype_Model_Block.Content.Dataview.GroupOrder()}
          set {_groupOrder = newValue}
        }
        /// Returns true if `groupOrder` has been explicitly set.
        public var hasGroupOrder: Bool {return self._groupOrder != nil}
        /// Clears the value of `groupOrder`. Subsequent reads from it will return its default value.
        public mutating func clearGroupOrder() {self._groupOrder = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _groupOrder: Anytype_Model_Block.Content.Dataview.GroupOrder? = nil
      }

      public struct ObjectOrderUpdate {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var viewID: String = String()

        public var groupID: String = String()

        public var sliceChanges: [Anytype_Event.Block.Dataview.SliceChange] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct SliceChange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var op: Anytype_Event.Block.Dataview.SliceOperation = .none

        public var ids: [String] = []

        public var afterID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct TargetObjectIdSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var targetObjectID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct IsCollectionSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var value: Bool = false

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }    }

extension Anytype_Event.Block.Dataview.SliceOperation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Event.Block.Dataview.SliceOperation] = [
    .none,
    .add,
    .move,
    .remove,
    .replace,
  ]
}
extension Anytype_Event.Block.Dataview: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.SliceOperation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Fields: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewDelete: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewOrder: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.SourceSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.OldRelationDelete: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.OldRelationSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.RelationDelete: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.RelationSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.GroupOrderUpdate: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ObjectOrderUpdate: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.SliceChange: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.TargetObjectIdSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.IsCollectionSet: @unchecked Sendable {}

extension Anytype_Event.Block.Dataview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Dataview"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview, rhs: Anytype_Event.Block.Dataview) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.SliceOperation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SliceOperationNone"),
    1: .same(proto: "SliceOperationAdd"),
    2: .same(proto: "SliceOperationMove"),
    3: .same(proto: "SliceOperationRemove"),
    4: .same(proto: "SliceOperationReplace"),
  ]
}

extension Anytype_Event.Block.Dataview.ViewSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "view"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _viewID: String = String()
    var _view: Anytype_Model_Block.Content.Dataview.View? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _viewID = source._viewID
      _view = source._view
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._viewID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._view) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._viewID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._viewID, fieldNumber: 2)
      }
      try { if let v = _storage._view {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewSet, rhs: Anytype_Event.Block.Dataview.ViewSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._viewID != rhs_storage._viewID {return false}
        if _storage._view != rhs_storage._view {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "filter"),
    4: .same(proto: "relation"),
    5: .same(proto: "sort"),
    6: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.viewID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.filter) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.relation) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.sort) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    if !self.filter.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.filter, fieldNumber: 3)
    }
    if !self.relation.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relation, fieldNumber: 4)
    }
    if !self.sort.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sort, fieldNumber: 5)
    }
    try { if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate, rhs: Anytype_Event.Block.Dataview.ViewUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.relation != rhs.relation {return false}
    if lhs.sort != rhs.sort {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Fields"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
    3: .same(proto: "coverRelationKey"),
    4: .same(proto: "hideIcon"),
    5: .same(proto: "cardSize"),
    6: .same(proto: "coverFit"),
    7: .same(proto: "groupRelationKey"),
    8: .same(proto: "groupBackgroundColors"),
    9: .same(proto: "pageLimit"),
    10: .same(proto: "defaultTemplateId"),
    15: .same(proto: "defaultObjectTypeId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.coverRelationKey) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.hideIcon) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.cardSize) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.coverFit) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.groupRelationKey) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.groupBackgroundColors) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.pageLimit) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.defaultTemplateID) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.defaultObjectTypeID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .table {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.coverRelationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.coverRelationKey, fieldNumber: 3)
    }
    if self.hideIcon != false {
      try visitor.visitSingularBoolField(value: self.hideIcon, fieldNumber: 4)
    }
    if self.cardSize != .small {
      try visitor.visitSingularEnumField(value: self.cardSize, fieldNumber: 5)
    }
    if self.coverFit != false {
      try visitor.visitSingularBoolField(value: self.coverFit, fieldNumber: 6)
    }
    if !self.groupRelationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.groupRelationKey, fieldNumber: 7)
    }
    if self.groupBackgroundColors != false {
      try visitor.visitSingularBoolField(value: self.groupBackgroundColors, fieldNumber: 8)
    }
    if self.pageLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.pageLimit, fieldNumber: 9)
    }
    if !self.defaultTemplateID.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultTemplateID, fieldNumber: 10)
    }
    if !self.defaultObjectTypeID.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultObjectTypeID, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Fields, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Fields) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.coverRelationKey != rhs.coverRelationKey {return false}
    if lhs.hideIcon != rhs.hideIcon {return false}
    if lhs.cardSize != rhs.cardSize {return false}
    if lhs.coverFit != rhs.coverFit {return false}
    if lhs.groupRelationKey != rhs.groupRelationKey {return false}
    if lhs.groupBackgroundColors != rhs.groupBackgroundColors {return false}
    if lhs.pageLimit != rhs.pageLimit {return false}
    if lhs.defaultTemplateID != rhs.defaultTemplateID {return false}
    if lhs.defaultObjectTypeID != rhs.defaultObjectTypeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Filter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "add"),
    2: .same(proto: "remove"),
    3: .same(proto: "update"),
    4: .same(proto: "move"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .add(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .add(v)
        }
      }()
      case 2: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .remove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .remove(v)
        }
      }()
      case 3: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .update(v)
        }
      }()
      case 4: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .move(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .move(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.operation {
    case .add?: try {
      guard case .add(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .remove?: try {
      guard case .remove(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .update?: try {
      guard case .update(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .move?: try {
      guard case .move(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Move"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Relation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "add"),
    2: .same(proto: "remove"),
    3: .same(proto: "update"),
    4: .same(proto: "move"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .add(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .add(v)
        }
      }()
      case 2: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .remove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .remove(v)
        }
      }()
      case 3: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .update(v)
        }
      }()
      case 4: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .move(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .move(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.operation {
    case .add?: try {
      guard case .add(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .remove?: try {
      guard case .remove(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .update?: try {
      guard case .update(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .move?: try {
      guard case .move(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Move"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Sort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "add"),
    2: .same(proto: "remove"),
    3: .same(proto: "update"),
    4: .same(proto: "move"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .add(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .add(v)
        }
      }()
      case 2: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .remove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .remove(v)
        }
      }()
      case 3: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .update(v)
        }
      }()
      case 4: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .move(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .move(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.operation {
    case .add?: try {
      guard case .add(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .remove?: try {
      guard case .remove(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .update?: try {
      guard case .update(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .move?: try {
      guard case .move(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Move"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.viewID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewDelete, rhs: Anytype_Event.Block.Dataview.ViewDelete) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.viewIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.viewIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewOrder, rhs: Anytype_Event.Block.Dataview.ViewOrder) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewIds != rhs.viewIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.SourceSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".SourceSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.source) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.source.isEmpty {
      try visitor.visitRepeatedStringField(value: self.source, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.SourceSet, rhs: Anytype_Event.Block.Dataview.SourceSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.OldRelationDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".OldRelationDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.relationKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.relationKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.OldRelationDelete, rhs: Anytype_Event.Block.Dataview.OldRelationDelete) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationKey != rhs.relationKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.OldRelationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".OldRelationSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationKey"),
    3: .same(proto: "relation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.relationKey) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.relationKey, fieldNumber: 2)
    }
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.OldRelationSet, rhs: Anytype_Event.Block.Dataview.OldRelationSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationKey != rhs.relationKey {return false}
    if lhs._relation != rhs._relation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.RelationDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".RelationDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationKeys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.relationKeys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.relationKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.RelationDelete, rhs: Anytype_Event.Block.Dataview.RelationDelete) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationKeys != rhs.relationKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.RelationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".RelationSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationLinks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.relationLinks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relationLinks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.RelationSet, rhs: Anytype_Event.Block.Dataview.RelationSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationLinks != rhs.relationLinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.GroupOrderUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".GroupOrderUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "groupOrder"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._groupOrder) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._groupOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.GroupOrderUpdate, rhs: Anytype_Event.Block.Dataview.GroupOrderUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._groupOrder != rhs._groupOrder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ObjectOrderUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ObjectOrderUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "groupId"),
    4: .same(proto: "sliceChanges"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.viewID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.sliceChanges) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 3)
    }
    if !self.sliceChanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sliceChanges, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ObjectOrderUpdate, rhs: Anytype_Event.Block.Dataview.ObjectOrderUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.sliceChanges != rhs.sliceChanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.SliceChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".SliceChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
    2: .same(proto: "ids"),
    3: .same(proto: "afterId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.op) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.op != .none {
      try visitor.visitSingularEnumField(value: self.op, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.SliceChange, rhs: Anytype_Event.Block.Dataview.SliceChange) -> Bool {
    if lhs.op != rhs.op {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.afterID != rhs.afterID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.TargetObjectIdSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".TargetObjectIdSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "targetObjectId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.targetObjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.targetObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetObjectID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.TargetObjectIdSet, rhs: Anytype_Event.Block.Dataview.TargetObjectIdSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.targetObjectID != rhs.targetObjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.IsCollectionSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".IsCollectionSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.IsCollectionSet, rhs: Anytype_Event.Block.Dataview.IsCollectionSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
