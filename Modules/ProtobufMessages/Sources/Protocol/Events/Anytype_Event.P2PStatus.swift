// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Event {
    public struct P2PStatus {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum Status: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case notConnected // = 0
      case notPossible // = 1
      case connected // = 2

      /// only for ios for now, fallback to NotPossible if not implemented on client
      case restricted // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .notConnected
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0:
                self = .notConnected
        case 1:
                self = .notPossible
        case 2:
                self = .connected
        case 3:
                self = .restricted
        default:
                self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .notConnected:
                return 0
        case .notPossible:
                return 1
        case .connected:
                return 2
        case .restricted:
                return 3
        case .UNRECOGNIZED(let i):
                return i
        }
      }

    }

    public init() {
        }
  }
}
extension Anytype_Event.P2PStatus: @unchecked Sendable {
}

extension Anytype_Event.P2PStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".P2PStatus"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.P2PStatus, rhs: Anytype_Event.P2PStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}