// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
extension Anytype_Event.Message {

    public enum OneOf_Value: Equatable {
      case accountShow(Anytype_Event.Account.Show)
      case accountDetails(Anytype_Event.Account.Details)
      case accountConfigUpdate(Anytype_Event.Account.Config.Update)
      case accountUpdate(Anytype_Event.Account.Update)
      case accountLinkChallenge(Anytype_Event.Account.LinkChallenge)
      case accountLinkChallengeHide(Anytype_Event.Account.LinkChallengeHide)
      case objectDetailsSet(Anytype_Event.Object.Details.Set)
      case objectDetailsAmend(Anytype_Event.Object.Details.Amend)
      case objectDetailsUnset(Anytype_Event.Object.Details.Unset)
      case objectRelationsAmend(Anytype_Event.Object.Relations.Amend)
      case objectRelationsRemove(Anytype_Event.Object.Relations.Remove)
      case objectRemove(Anytype_Event.Object.Remove)
      case objectClose(Anytype_Event.Object.Close)
      case objectRestrictionsSet(Anytype_Event.Object.Restrictions.Set)
      case subscriptionAdd(Anytype_Event.Object.Subscription.Add)
      case subscriptionRemove(Anytype_Event.Object.Subscription.Remove)
      case subscriptionPosition(Anytype_Event.Object.Subscription.Position)
      case subscriptionCounters(Anytype_Event.Object.Subscription.Counters)
      case subscriptionGroups(Anytype_Event.Object.Subscription.Groups)
      case blockAdd(Anytype_Event.Block.Add)
      case blockDelete(Anytype_Event.Block.Delete)
      case filesUpload(Anytype_Event.Block.FilesUpload)
      case marksInfo(Anytype_Event.Block.MarksInfo)
      case blockSetFields(Anytype_Event.Block.Set.Fields)
      case blockSetChildrenIds(Anytype_Event.Block.Set.ChildrenIds)
      case blockSetRestrictions(Anytype_Event.Block.Set.Restrictions)
      case blockSetBackgroundColor(Anytype_Event.Block.Set.BackgroundColor)
      case blockSetText(Anytype_Event.Block.Set.Text)
      case blockSetFile(Anytype_Event.Block.Set.File)
      case blockSetLink(Anytype_Event.Block.Set.Link)
      case blockSetBookmark(Anytype_Event.Block.Set.Bookmark)
      case blockSetAlign(Anytype_Event.Block.Set.Align)
      case blockSetDiv(Anytype_Event.Block.Set.Div)
      case blockSetRelation(Anytype_Event.Block.Set.Relation)
      case blockSetLatex(Anytype_Event.Block.Set.Latex)
      case blockSetVerticalAlign(Anytype_Event.Block.Set.VerticalAlign)
      case blockSetTableRow(Anytype_Event.Block.Set.TableRow)
      case blockSetWidget(Anytype_Event.Block.Set.Widget)
      case blockDataviewViewSet(Anytype_Event.Block.Dataview.ViewSet)
      case blockDataviewViewDelete(Anytype_Event.Block.Dataview.ViewDelete)
      case blockDataviewViewOrder(Anytype_Event.Block.Dataview.ViewOrder)
      /// deprecated, source is no longer used
      case blockDataviewSourceSet(Anytype_Event.Block.Dataview.SourceSet)
      case blockDataViewGroupOrderUpdate(Anytype_Event.Block.Dataview.GroupOrderUpdate)
      case blockDataViewObjectOrderUpdate(Anytype_Event.Block.Dataview.ObjectOrderUpdate)
      case blockDataviewRelationDelete(Anytype_Event.Block.Dataview.RelationDelete)
      case blockDataviewRelationSet(Anytype_Event.Block.Dataview.RelationSet)
      case blockDataviewViewUpdate(Anytype_Event.Block.Dataview.ViewUpdate)
      case blockDataviewTargetObjectIDSet(Anytype_Event.Block.Dataview.TargetObjectIdSet)
      case blockDataviewIsCollectionSet(Anytype_Event.Block.Dataview.IsCollectionSet)
      /// deprecated
      case blockDataviewOldRelationDelete(Anytype_Event.Block.Dataview.OldRelationDelete)
      /// deprecated
      case blockDataviewOldRelationSet(Anytype_Event.Block.Dataview.OldRelationSet)
      case userBlockJoin(Anytype_Event.User.Block.Join)
      case userBlockLeft(Anytype_Event.User.Block.Left)
      case userBlockSelectRange(Anytype_Event.User.Block.SelectRange)
      case userBlockTextRange(Anytype_Event.User.Block.TextRange)
      case ping(Anytype_Event.Ping)
      case processNew(Anytype_Event.Process.New)
      case processUpdate(Anytype_Event.Process.Update)
      case processDone(Anytype_Event.Process.Done)
      case threadStatus(Anytype_Event.Status.Thread)
      case fileLimitReached(Anytype_Event.File.LimitReached)
      case fileSpaceUsage(Anytype_Event.File.SpaceUsage)
      case fileLocalUsage(Anytype_Event.File.LocalUsage)
      case fileLimitUpdated(Anytype_Event.File.LimitUpdated)
      case notificationSend(Anytype_Event.Notification.Send)
      case notificationUpdate(Anytype_Event.Notification.Update)
      case payloadBroadcast(Anytype_Event.Payload.Broadcast)
      case membershipUpdate(Anytype_Event.Membership.Update)
      case spaceSyncStatusUpdate(Anytype_Event.Space.SyncStatus.Update)
      case p2PStatusUpdate(Anytype_Event.P2PStatus.Update)
      case importFinish(Anytype_Event.Import.Finish)
      case chatAdd(Anytype_Event.Chat.Add)
      case chatUpdate(Anytype_Event.Chat.Update)
      case chatUpdateReactions(Anytype_Event.Chat.UpdateReactions)
      case chatDelete(Anytype_Event.Chat.Delete)

    #if !swift(>=4.1)
      public static func ==(lhs: Anytype_Event.Message.OneOf_Value, rhs: Anytype_Event.Message.OneOf_Value) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.accountShow, .accountShow): return {
          guard case .accountShow(let l) = lhs, case .accountShow(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountDetails, .accountDetails): return {
          guard case .accountDetails(let l) = lhs, case .accountDetails(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountConfigUpdate, .accountConfigUpdate): return {
          guard case .accountConfigUpdate(let l) = lhs, case .accountConfigUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountUpdate, .accountUpdate): return {
          guard case .accountUpdate(let l) = lhs, case .accountUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountLinkChallenge, .accountLinkChallenge): return {
          guard case .accountLinkChallenge(let l) = lhs, case .accountLinkChallenge(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountLinkChallengeHide, .accountLinkChallengeHide): return {
          guard case .accountLinkChallengeHide(let l) = lhs, case .accountLinkChallengeHide(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectDetailsSet, .objectDetailsSet): return {
          guard case .objectDetailsSet(let l) = lhs, case .objectDetailsSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectDetailsAmend, .objectDetailsAmend): return {
          guard case .objectDetailsAmend(let l) = lhs, case .objectDetailsAmend(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectDetailsUnset, .objectDetailsUnset): return {
          guard case .objectDetailsUnset(let l) = lhs, case .objectDetailsUnset(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRelationsAmend, .objectRelationsAmend): return {
          guard case .objectRelationsAmend(let l) = lhs, case .objectRelationsAmend(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRelationsRemove, .objectRelationsRemove): return {
          guard case .objectRelationsRemove(let l) = lhs, case .objectRelationsRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRemove, .objectRemove): return {
          guard case .objectRemove(let l) = lhs, case .objectRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectClose, .objectClose): return {
          guard case .objectClose(let l) = lhs, case .objectClose(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRestrictionsSet, .objectRestrictionsSet): return {
          guard case .objectRestrictionsSet(let l) = lhs, case .objectRestrictionsSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionAdd, .subscriptionAdd): return {
          guard case .subscriptionAdd(let l) = lhs, case .subscriptionAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionRemove, .subscriptionRemove): return {
          guard case .subscriptionRemove(let l) = lhs, case .subscriptionRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionPosition, .subscriptionPosition): return {
          guard case .subscriptionPosition(let l) = lhs, case .subscriptionPosition(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionCounters, .subscriptionCounters): return {
          guard case .subscriptionCounters(let l) = lhs, case .subscriptionCounters(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionGroups, .subscriptionGroups): return {
          guard case .subscriptionGroups(let l) = lhs, case .subscriptionGroups(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockAdd, .blockAdd): return {
          guard case .blockAdd(let l) = lhs, case .blockAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDelete, .blockDelete): return {
          guard case .blockDelete(let l) = lhs, case .blockDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.filesUpload, .filesUpload): return {
          guard case .filesUpload(let l) = lhs, case .filesUpload(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.marksInfo, .marksInfo): return {
          guard case .marksInfo(let l) = lhs, case .marksInfo(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetFields, .blockSetFields): return {
          guard case .blockSetFields(let l) = lhs, case .blockSetFields(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetChildrenIds, .blockSetChildrenIds): return {
          guard case .blockSetChildrenIds(let l) = lhs, case .blockSetChildrenIds(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetRestrictions, .blockSetRestrictions): return {
          guard case .blockSetRestrictions(let l) = lhs, case .blockSetRestrictions(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetBackgroundColor, .blockSetBackgroundColor): return {
          guard case .blockSetBackgroundColor(let l) = lhs, case .blockSetBackgroundColor(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetText, .blockSetText): return {
          guard case .blockSetText(let l) = lhs, case .blockSetText(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetFile, .blockSetFile): return {
          guard case .blockSetFile(let l) = lhs, case .blockSetFile(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetLink, .blockSetLink): return {
          guard case .blockSetLink(let l) = lhs, case .blockSetLink(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetBookmark, .blockSetBookmark): return {
          guard case .blockSetBookmark(let l) = lhs, case .blockSetBookmark(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetAlign, .blockSetAlign): return {
          guard case .blockSetAlign(let l) = lhs, case .blockSetAlign(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetDiv, .blockSetDiv): return {
          guard case .blockSetDiv(let l) = lhs, case .blockSetDiv(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetRelation, .blockSetRelation): return {
          guard case .blockSetRelation(let l) = lhs, case .blockSetRelation(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetLatex, .blockSetLatex): return {
          guard case .blockSetLatex(let l) = lhs, case .blockSetLatex(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetVerticalAlign, .blockSetVerticalAlign): return {
          guard case .blockSetVerticalAlign(let l) = lhs, case .blockSetVerticalAlign(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetTableRow, .blockSetTableRow): return {
          guard case .blockSetTableRow(let l) = lhs, case .blockSetTableRow(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetWidget, .blockSetWidget): return {
          guard case .blockSetWidget(let l) = lhs, case .blockSetWidget(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewSet, .blockDataviewViewSet): return {
          guard case .blockDataviewViewSet(let l) = lhs, case .blockDataviewViewSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewDelete, .blockDataviewViewDelete): return {
          guard case .blockDataviewViewDelete(let l) = lhs, case .blockDataviewViewDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewOrder, .blockDataviewViewOrder): return {
          guard case .blockDataviewViewOrder(let l) = lhs, case .blockDataviewViewOrder(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewSourceSet, .blockDataviewSourceSet): return {
          guard case .blockDataviewSourceSet(let l) = lhs, case .blockDataviewSourceSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataViewGroupOrderUpdate, .blockDataViewGroupOrderUpdate): return {
          guard case .blockDataViewGroupOrderUpdate(let l) = lhs, case .blockDataViewGroupOrderUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataViewObjectOrderUpdate, .blockDataViewObjectOrderUpdate): return {
          guard case .blockDataViewObjectOrderUpdate(let l) = lhs, case .blockDataViewObjectOrderUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewRelationDelete, .blockDataviewRelationDelete): return {
          guard case .blockDataviewRelationDelete(let l) = lhs, case .blockDataviewRelationDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewRelationSet, .blockDataviewRelationSet): return {
          guard case .blockDataviewRelationSet(let l) = lhs, case .blockDataviewRelationSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewUpdate, .blockDataviewViewUpdate): return {
          guard case .blockDataviewViewUpdate(let l) = lhs, case .blockDataviewViewUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewTargetObjectIDSet, .blockDataviewTargetObjectIDSet): return {
          guard case .blockDataviewTargetObjectIDSet(let l) = lhs, case .blockDataviewTargetObjectIDSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewIsCollectionSet, .blockDataviewIsCollectionSet): return {
          guard case .blockDataviewIsCollectionSet(let l) = lhs, case .blockDataviewIsCollectionSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewOldRelationDelete, .blockDataviewOldRelationDelete): return {
          guard case .blockDataviewOldRelationDelete(let l) = lhs, case .blockDataviewOldRelationDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewOldRelationSet, .blockDataviewOldRelationSet): return {
          guard case .blockDataviewOldRelationSet(let l) = lhs, case .blockDataviewOldRelationSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockJoin, .userBlockJoin): return {
          guard case .userBlockJoin(let l) = lhs, case .userBlockJoin(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockLeft, .userBlockLeft): return {
          guard case .userBlockLeft(let l) = lhs, case .userBlockLeft(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockSelectRange, .userBlockSelectRange): return {
          guard case .userBlockSelectRange(let l) = lhs, case .userBlockSelectRange(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockTextRange, .userBlockTextRange): return {
          guard case .userBlockTextRange(let l) = lhs, case .userBlockTextRange(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.ping, .ping): return {
          guard case .ping(let l) = lhs, case .ping(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.processNew, .processNew): return {
          guard case .processNew(let l) = lhs, case .processNew(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.processUpdate, .processUpdate): return {
          guard case .processUpdate(let l) = lhs, case .processUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.processDone, .processDone): return {
          guard case .processDone(let l) = lhs, case .processDone(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.threadStatus, .threadStatus): return {
          guard case .threadStatus(let l) = lhs, case .threadStatus(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileLimitReached, .fileLimitReached): return {
          guard case .fileLimitReached(let l) = lhs, case .fileLimitReached(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileSpaceUsage, .fileSpaceUsage): return {
          guard case .fileSpaceUsage(let l) = lhs, case .fileSpaceUsage(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileLocalUsage, .fileLocalUsage): return {
          guard case .fileLocalUsage(let l) = lhs, case .fileLocalUsage(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileLimitUpdated, .fileLimitUpdated): return {
          guard case .fileLimitUpdated(let l) = lhs, case .fileLimitUpdated(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.notificationSend, .notificationSend): return {
          guard case .notificationSend(let l) = lhs, case .notificationSend(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.notificationUpdate, .notificationUpdate): return {
          guard case .notificationUpdate(let l) = lhs, case .notificationUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.payloadBroadcast, .payloadBroadcast): return {
          guard case .payloadBroadcast(let l) = lhs, case .payloadBroadcast(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.membershipUpdate, .membershipUpdate): return {
          guard case .membershipUpdate(let l) = lhs, case .membershipUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.spaceSyncStatusUpdate, .spaceSyncStatusUpdate): return {
          guard case .spaceSyncStatusUpdate(let l) = lhs, case .spaceSyncStatusUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.p2PStatusUpdate, .p2PStatusUpdate): return {
          guard case .p2PStatusUpdate(let l) = lhs, case .p2PStatusUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.importFinish, .importFinish): return {
          guard case .importFinish(let l) = lhs, case .importFinish(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.chatAdd, .chatAdd): return {
          guard case .chatAdd(let l) = lhs, case .chatAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.chatUpdate, .chatUpdate): return {
          guard case .chatUpdate(let l) = lhs, case .chatUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.chatUpdateReactions, .chatUpdateReactions): return {
          guard case .chatUpdateReactions(let l) = lhs, case .chatUpdateReactions(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.chatDelete, .chatDelete): return {
          guard case .chatDelete(let l) = lhs, case .chatDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }}
extension Anytype_Event.Message.OneOf_Value: @unchecked Sendable {}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
