// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Event {
    public struct Space {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum Status: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case synced // = 0
      case syncing // = 1
      case error // = 2
      case offline // = 3
      case networkNeedsUpdate // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .synced
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0:
                self = .synced
        case 1:
                self = .syncing
        case 2:
                self = .error
        case 3:
                self = .offline
        case 4:
                self = .networkNeedsUpdate
        default:
                self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .synced:
                return 0
        case .syncing:
                return 1
        case .error:
                return 2
        case .offline:
                return 3
        case .networkNeedsUpdate:
                return 4
        case .UNRECOGNIZED(let i):
                return i
        }
      }

    }

    public enum Network: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case anytype // = 0
      case selfHost // = 1
      case localOnly // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .anytype
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0:
                self = .anytype
        case 1:
                self = .selfHost
        case 2:
                self = .localOnly
        default:
                self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .anytype:
                return 0
        case .selfHost:
                return 1
        case .localOnly:
                return 2
        case .UNRECOGNIZED(let i):
                return i
        }
      }

    }

    public enum SyncError: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case null // = 0
      case storageLimitExceed // = 1
      case incompatibleVersion // = 2
      case networkError // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .null
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0:
                self = .null
        case 1:
                self = .storageLimitExceed
        case 2:
                self = .incompatibleVersion
        case 3:
                self = .networkError
        default:
                self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .null:
                return 0
        case .storageLimitExceed:
                return 1
        case .incompatibleVersion:
                return 2
        case .networkError:
                return 3
        case .UNRECOGNIZED(let i):
                return i
        }
      }

    }

    public init() {
        }
  }
}
extension Anytype_Event.Space: @unchecked Sendable {
}

extension Anytype_Event.Space: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Space"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Space, rhs: Anytype_Event.Space) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}