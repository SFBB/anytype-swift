// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Event.Space.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Event.Space.Status] = [
    .synced,
    .syncing,
    .error,
    .offline,
    .networkNeedsUpdate,
  ]
}

extension Anytype_Event.Space.Network: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Event.Space.Network] = [
    .anytype,
    .selfHost,
    .localOnly,
  ]
}

extension Anytype_Event.Space.SyncError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Event.Space.SyncError] = [
    .null,
    .storageLimitExceed,
    .incompatibleVersion,
    .networkError,
  ]
}

extension Anytype_Event.P2PStatus.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Event.P2PStatus.Status] = [
    .notConnected,
    .notPossible,
    .connected,
    .restricted,
  ]
}

extension Anytype_Model.Process.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model.Process.State] = [
    .none,
    .running,
    .done,
    .canceled,
    .error,
  ]
}
extension Anytype_Event: @unchecked Sendable {
}
extension Anytype_Event.Message.OneOf_Value: @unchecked Sendable {
}
extension Anytype_Event.Space.Status: @unchecked Sendable {
}
extension Anytype_Event.Space.Network: @unchecked Sendable {
}
extension Anytype_Event.Space.SyncError: @unchecked Sendable {
}
extension Anytype_Event.P2PStatus.Status: @unchecked Sendable {
}
extension Anytype_ResponseEvent: @unchecked Sendable {
}
extension Anytype_Model: @unchecked Sendable {
}
extension Anytype_Model.Process.OneOf_Message: @unchecked Sendable {
}
extension Anytype_Model.Process.State: @unchecked Sendable {
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "contextId"),
    3: .same(proto: "initiator"),
    4: .same(proto: "traceId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeRepeatedMessageField(value: &self.messages)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.contextID)
          }()
      case 3:
          try {
              try decoder.decodeSingularMessageField(value: &self._initiator)
          }()
      case 4:
          try {
              try decoder.decodeSingularStringField(value: &self.traceID)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 2)
    }
    try {
        if let v = self._initiator {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
    }()
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event, rhs: Anytype_Event) -> Bool {
    if lhs.messages != rhs.messages {
        return false
    }
    if lhs.contextID != rhs.contextID {
        return false
    }
    if lhs._initiator != rhs._initiator {
        return false
    }
    if lhs.traceID != rhs.traceID {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Event.Space.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Synced"),
    1: .same(proto: "Syncing"),
    2: .same(proto: "Error"),
    3: .same(proto: "Offline"),
    4: .same(proto: "NetworkNeedsUpdate"),
  ]
}

extension Anytype_Event.Space.Network: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Anytype"),
    1: .same(proto: "SelfHost"),
    2: .same(proto: "LocalOnly"),
  ]
}

extension Anytype_Event.Space.SyncError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Null"),
    1: .same(proto: "StorageLimitExceed"),
    2: .same(proto: "IncompatibleVersion"),
    3: .same(proto: "NetworkError"),
  ]
}

extension Anytype_Event.P2PStatus.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NotConnected"),
    1: .same(proto: "NotPossible"),
    2: .same(proto: "Connected"),
    3: .same(proto: "Restricted"),
  ]
}

extension Anytype_ResponseEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "contextId"),
    4: .same(proto: "traceId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeRepeatedMessageField(value: &self.messages)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.contextID)
          }()
      case 4:
          try {
              try decoder.decodeSingularStringField(value: &self.traceID)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 2)
    }
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_ResponseEvent, rhs: Anytype_ResponseEvent) -> Bool {
    if lhs.messages != rhs.messages {
        return false
    }
    if lhs.contextID != rhs.contextID {
        return false
    }
    if lhs.traceID != rhs.traceID {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Model: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Model"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model, rhs: Anytype_Model) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Model.Process.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Running"),
    2: .same(proto: "Done"),
    3: .same(proto: "Canceled"),
    4: .same(proto: "Error"),
  ]
}
