// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
extension Anytype_Model_Import {

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case notion // = 0
    case markdown // = 1

    /// external developers use it
    case external // = 2
    case pb // = 3
    case html // = 4
    case txt // = 5
    case csv // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .notion
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .notion
      case 1:
          self = .markdown
      case 2:
          self = .external
      case 3:
          self = .pb
      case 4:
          self = .html
      case 5:
          self = .txt
      case 6:
          self = .csv
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .notion:
          return 0
      case .markdown:
          return 1
      case .external:
          return 2
      case .pb:
          return 3
      case .html:
          return 4
      case .txt:
          return 5
      case .csv:
          return 6
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }
}

extension Anytype_Model_Import.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Import.TypeEnum] = [
    .notion,
    .markdown,
    .external,
    .pb,
    .html,
    .txt,
    .csv,
  ]
}
extension Anytype_Model_Import.TypeEnum: @unchecked Sendable {
}

extension Anytype_Model_Import.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Notion"),
    1: .same(proto: "Markdown"),
    2: .same(proto: "External"),
    3: .same(proto: "Pb"),
    4: .same(proto: "Html"),
    5: .same(proto: "Txt"),
    6: .same(proto: "Csv"),
  ]
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {
  }
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
