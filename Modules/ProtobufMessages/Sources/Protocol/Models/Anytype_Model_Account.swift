// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User's thread id
  public var id: String {
    get {
        return _storage._id
    }
    set {
        _uniqueStorage()._id = newValue
    }
  }

  public var config: Anytype_Model_Account.Config {
    get {
        return _storage._config ?? Anytype_Model_Account.Config()
    }
    set {
        _uniqueStorage()._config = newValue
    }
  }
  /// Returns true if `config` has been explicitly set.
  public var hasConfig: Bool {
      return _storage._config != nil
  }
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  public mutating func clearConfig() {
      _uniqueStorage()._config = nil
  }

  public var status: Anytype_Model_Account.Status {
    get {
        return _storage._status ?? Anytype_Model_Account.Status()
    }
    set {
        _uniqueStorage()._status = newValue
    }
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {
      return _storage._status != nil
  }
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {
      _uniqueStorage()._status = nil
  }

  public var info: Anytype_Model_Account.Info {
    get {
        return _storage._info ?? Anytype_Model_Account.Info()
    }
    set {
        _uniqueStorage()._info = newValue
    }
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {
      return _storage._info != nil
  }
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {
      _uniqueStorage()._info = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum StatusType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case active // = 0
    case pendingDeletion // = 1
    case startedDeletion // = 2
    case deleted // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .active
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .active
      case 1:
          self = .pendingDeletion
      case 2:
          self = .startedDeletion
      case 3:
          self = .deleted
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .active:
          return 0
      case .pendingDeletion:
          return 1
      case .startedDeletion:
          return 2
      case .deleted:
          return 3
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }

  public init() {
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}
extension Anytype_Model_Account: @unchecked Sendable {
}

extension Anytype_Model_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Account"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    4: .same(proto: "config"),
    5: .same(proto: "status"),
    6: .same(proto: "info"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _config: Anytype_Model_Account.Config? = nil
    var _status: Anytype_Model_Account.Status? = nil
    var _info: Anytype_Model_Account.Info? = nil

    static let defaultInstance = _StorageClass()

    private init() {
    }

    init(copying source: _StorageClass) {
      _id = source._id
      _config = source._config
      _status = source._status
      _info = source._info
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1:
            try {
                try decoder.decodeSingularStringField(value: &_storage._id)
            }()
        case 4:
            try {
                try decoder.decodeSingularMessageField(value: &_storage._config)
            }()
        case 5:
            try {
                try decoder.decodeSingularMessageField(value: &_storage._status)
            }()
        case 6:
            try {
                try decoder.decodeSingularMessageField(value: &_storage._info)
            }()
        default:
            break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      try {
          if let v = _storage._config {
                  try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
                }
      }()
      try {
          if let v = _storage._status {
                  try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
                }
      }()
      try {
          if let v = _storage._info {
                  try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
                }
      }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Account, rhs: Anytype_Model_Account) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {
            return false
        }
        if _storage._config != rhs_storage._config {
            return false
        }
        if _storage._status != rhs_storage._status {
            return false
        }
        if _storage._info != rhs_storage._info {
            return false
        }
        return true
      }
      if !storagesAreEqual {
          return false
      }
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}