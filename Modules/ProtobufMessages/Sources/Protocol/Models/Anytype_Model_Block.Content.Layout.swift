// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Model_Block.Content {
    public struct Layout {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var style: Anytype_Model_Block.Content.Layout.Style = .row

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum Style: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case row // = 0
        case column // = 1
        case div // = 2
        case header // = 3
        case tableRows // = 4
        case tableColumns // = 5
        case UNRECOGNIZED(Int)

        public init() {
          self = .row
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0:
                  self = .row
          case 1:
                  self = .column
          case 2:
                  self = .div
          case 3:
                  self = .header
          case 4:
                  self = .tableRows
          case 5:
                  self = .tableColumns
          default:
                  self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .row:
                  return 0
          case .column:
                  return 1
          case .div:
                  return 2
          case .header:
                  return 3
          case .tableRows:
                  return 4
          case .tableColumns:
                  return 5
          case .UNRECOGNIZED(let i):
                  return i
          }
        }

      }

      public init() {
          }
    }
}

extension Anytype_Model_Block.Content.Layout.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Block.Content.Layout.Style] = [
    .row,
    .column,
    .div,
    .header,
    .tableRows,
    .tableColumns,
  ]
}
extension Anytype_Model_Block.Content.Layout: @unchecked Sendable {
}
extension Anytype_Model_Block.Content.Layout.Style: @unchecked Sendable {
}

extension Anytype_Model_Block.Content.Layout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Layout"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularEnumField(value: &self.style)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.style != .row {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Layout, rhs: Anytype_Model_Block.Content.Layout) -> Bool {
    if lhs.style != rhs.style {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Model_Block.Content.Layout.Style: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Row"),
    1: .same(proto: "Column"),
    2: .same(proto: "Div"),
    3: .same(proto: "Header"),
    4: .same(proto: "TableRows"),
    5: .same(proto: "TableColumns"),
  ]
}