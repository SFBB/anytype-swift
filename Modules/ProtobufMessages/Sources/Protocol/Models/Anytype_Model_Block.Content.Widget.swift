// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Model_Block.Content {
    public struct Widget {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var layout: Anytype_Model_Block.Content.Widget.Layout = .link

      public var limit: Int32 = 0

      public var viewID: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum Layout: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case link // = 0
        case tree // = 1
        case list // = 2
        case compactList // = 3
        case view // = 4
        case UNRECOGNIZED(Int)

        public init() {
          self = .link
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0:
                  self = .link
          case 1:
                  self = .tree
          case 2:
                  self = .list
          case 3:
                  self = .compactList
          case 4:
                  self = .view
          default:
                  self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .link:
                  return 0
          case .tree:
                  return 1
          case .list:
                  return 2
          case .compactList:
                  return 3
          case .view:
                  return 4
          case .UNRECOGNIZED(let i):
                  return i
          }
        }

      }

      public init() {
          }
    }
}

extension Anytype_Model_Block.Content.Widget.Layout: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Block.Content.Widget.Layout] = [
    .link,
    .tree,
    .list,
    .compactList,
    .view,
  ]
}
extension Anytype_Model_Block.Content.Widget: @unchecked Sendable {
}
extension Anytype_Model_Block.Content.Widget.Layout: @unchecked Sendable {
}

extension Anytype_Model_Block.Content.Widget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Widget"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .same(proto: "limit"),
    3: .same(proto: "viewId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularEnumField(value: &self.layout)
          }()
      case 2:
          try {
              try decoder.decodeSingularInt32Field(value: &self.limit)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.viewID)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.layout != .link {
      try visitor.visitSingularEnumField(value: self.layout, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 2)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Widget, rhs: Anytype_Model_Block.Content.Widget) -> Bool {
    if lhs.layout != rhs.layout {
        return false
    }
    if lhs.limit != rhs.limit {
        return false
    }
    if lhs.viewID != rhs.viewID {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Model_Block.Content.Widget.Layout: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Link"),
    1: .same(proto: "Tree"),
    2: .same(proto: "List"),
    3: .same(proto: "CompactList"),
    4: .same(proto: "View"),
  ]
}