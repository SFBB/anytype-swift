// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content {
    public struct Latex: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var text: String = String()

      public var processor: Anytype_Model_Block.Content.Latex.Processor = .latex

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum Processor: SwiftProtobuf.Enum, Swift.CaseIterable {
        public typealias RawValue = Int
        case latex // = 0
        case mermaid // = 1
        case chart // = 2
        case youtube // = 3
        case vimeo // = 4
        case soundcloud // = 5
        case googleMaps // = 6
        case miro // = 7
        case figma // = 8
        case twitter // = 9
        case openStreetMap // = 10
        case reddit // = 11
        case facebook // = 12
        case instagram // = 13
        case telegram // = 14
        case githubGist // = 15
        case codepen // = 16
        case bilibili // = 17
        case excalidraw // = 18
        case kroki // = 19
        case graphviz // = 20
        case sketchfab // = 21
        case image // = 22
        case UNRECOGNIZED(Int)

        public init() {
          self = .latex
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .latex
          case 1: self = .mermaid
          case 2: self = .chart
          case 3: self = .youtube
          case 4: self = .vimeo
          case 5: self = .soundcloud
          case 6: self = .googleMaps
          case 7: self = .miro
          case 8: self = .figma
          case 9: self = .twitter
          case 10: self = .openStreetMap
          case 11: self = .reddit
          case 12: self = .facebook
          case 13: self = .instagram
          case 14: self = .telegram
          case 15: self = .githubGist
          case 16: self = .codepen
          case 17: self = .bilibili
          case 18: self = .excalidraw
          case 19: self = .kroki
          case 20: self = .graphviz
          case 21: self = .sketchfab
          case 22: self = .image
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .latex: return 0
          case .mermaid: return 1
          case .chart: return 2
          case .youtube: return 3
          case .vimeo: return 4
          case .soundcloud: return 5
          case .googleMaps: return 6
          case .miro: return 7
          case .figma: return 8
          case .twitter: return 9
          case .openStreetMap: return 10
          case .reddit: return 11
          case .facebook: return 12
          case .instagram: return 13
          case .telegram: return 14
          case .githubGist: return 15
          case .codepen: return 16
          case .bilibili: return 17
          case .excalidraw: return 18
          case .kroki: return 19
          case .graphviz: return 20
          case .sketchfab: return 21
          case .image: return 22
          case .UNRECOGNIZED(let i): return i
          }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static let allCases: [Anytype_Model_Block.Content.Latex.Processor] = [
          .latex,
          .mermaid,
          .chart,
          .youtube,
          .vimeo,
          .soundcloud,
          .googleMaps,
          .miro,
          .figma,
          .twitter,
          .openStreetMap,
          .reddit,
          .facebook,
          .instagram,
          .telegram,
          .githubGist,
          .codepen,
          .bilibili,
          .excalidraw,
          .kroki,
          .graphviz,
          .sketchfab,
          .image,
        ]

      }

      public init() {}
    }    
}

extension Anytype_Model_Block.Content.Latex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Latex"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "processor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.processor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.processor != .latex {
      try visitor.visitSingularEnumField(value: self.processor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Latex, rhs: Anytype_Model_Block.Content.Latex) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.processor != rhs.processor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Latex.Processor: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Latex"),
    1: .same(proto: "Mermaid"),
    2: .same(proto: "Chart"),
    3: .same(proto: "Youtube"),
    4: .same(proto: "Vimeo"),
    5: .same(proto: "Soundcloud"),
    6: .same(proto: "GoogleMaps"),
    7: .same(proto: "Miro"),
    8: .same(proto: "Figma"),
    9: .same(proto: "Twitter"),
    10: .same(proto: "OpenStreetMap"),
    11: .same(proto: "Reddit"),
    12: .same(proto: "Facebook"),
    13: .same(proto: "Instagram"),
    14: .same(proto: "Telegram"),
    15: .same(proto: "GithubGist"),
    16: .same(proto: "Codepen"),
    17: .same(proto: "Bilibili"),
    18: .same(proto: "Excalidraw"),
    19: .same(proto: "Kroki"),
    20: .same(proto: "Graphviz"),
    21: .same(proto: "Sketchfab"),
    22: .same(proto: "Image"),
  ]
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
