// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content {
    public struct File {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var hash: String = String()

      public var name: String = String()

      public var type: Anytype_Model_Block.Content.File.TypeEnum = .none

      public var mime: String = String()

      public var size: Int64 = 0

      public var addedAt: Int64 = 0

      public var targetObjectID: String = String()

      public var state: Anytype_Model_Block.Content.File.State = .empty

      public var style: Anytype_Model_Block.Content.File.Style = .auto

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum TypeEnum: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case none // = 0
        case file // = 1
        case image // = 2
        case video // = 3
        case audio // = 4
        case pdf // = 5
        case UNRECOGNIZED(Int)

        public init() {
          self = .none
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .none
          case 1: self = .file
          case 2: self = .image
          case 3: self = .video
          case 4: self = .audio
          case 5: self = .pdf
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .none: return 0
          case .file: return 1
          case .image: return 2
          case .video: return 3
          case .audio: return 4
          case .pdf: return 5
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public enum Style: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// all types expect File and None has Embed style by default
        case auto // = 0
        case link // = 1
        case embed // = 2
        case UNRECOGNIZED(Int)

        public init() {
          self = .auto
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .auto
          case 1: self = .link
          case 2: self = .embed
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .auto: return 0
          case .link: return 1
          case .embed: return 2
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public enum State: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// There is no file and preview, it's an empty block, that waits files.
        case empty // = 0

        /// There is still no file/preview, but file already uploading
        case uploading // = 1

        /// File and preview downloaded
        case done // = 2

        /// Error while uploading
        case error // = 3
        case UNRECOGNIZED(Int)

        public init() {
          self = .empty
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .empty
          case 1: self = .uploading
          case 2: self = .done
          case 3: self = .error
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .empty: return 0
          case .uploading: return 1
          case .done: return 2
          case .error: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}
    }    }

extension Anytype_Model_Block.Content.File.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Block.Content.File.TypeEnum] = [
    .none,
    .file,
    .image,
    .video,
    .audio,
    .pdf,
  ]
}

extension Anytype_Model_Block.Content.File.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Block.Content.File.Style] = [
    .auto,
    .link,
    .embed,
  ]
}

extension Anytype_Model_Block.Content.File.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Block.Content.File.State] = [
    .empty,
    .uploading,
    .done,
    .error,
  ]
}
extension Anytype_Model_Block.Content.File: @unchecked Sendable {}
extension Anytype_Model_Block.Content.File.TypeEnum: @unchecked Sendable {}
extension Anytype_Model_Block.Content.File.Style: @unchecked Sendable {}
extension Anytype_Model_Block.Content.File.State: @unchecked Sendable {}

extension Anytype_Model_Block.Content.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".File"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .same(proto: "mime"),
    5: .same(proto: "size"),
    6: .same(proto: "addedAt"),
    9: .same(proto: "targetObjectId"),
    7: .same(proto: "state"),
    8: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.mime) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.addedAt) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.targetObjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.type != .none {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if !self.mime.isEmpty {
      try visitor.visitSingularStringField(value: self.mime, fieldNumber: 4)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 5)
    }
    if self.addedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.addedAt, fieldNumber: 6)
    }
    if self.state != .empty {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 7)
    }
    if self.style != .auto {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 8)
    }
    if !self.targetObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetObjectID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.File, rhs: Anytype_Model_Block.Content.File) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.mime != rhs.mime {return false}
    if lhs.size != rhs.size {return false}
    if lhs.addedAt != rhs.addedAt {return false}
    if lhs.targetObjectID != rhs.targetObjectID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.File.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "File"),
    2: .same(proto: "Image"),
    3: .same(proto: "Video"),
    4: .same(proto: "Audio"),
    5: .same(proto: "PDF"),
  ]
}

extension Anytype_Model_Block.Content.File.Style: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Auto"),
    1: .same(proto: "Link"),
    2: .same(proto: "Embed"),
  ]
}

extension Anytype_Model_Block.Content.File.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Empty"),
    1: .same(proto: "Uploading"),
    2: .same(proto: "Done"),
    3: .same(proto: "Error"),
  ]
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
