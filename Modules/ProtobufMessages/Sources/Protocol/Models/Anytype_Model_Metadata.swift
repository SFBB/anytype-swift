// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Anytype_Model_Metadata.OneOf_Payload? = nil

  public var identity: Anytype_Model_Metadata.Payload.IdentityPayload {
    get {
      if case .identity(let v)? = payload {
          return v
      }
      return Anytype_Model_Metadata.Payload.IdentityPayload()
    }
    set {
        payload = .identity(newValue)
    }
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case identity(Anytype_Model_Metadata.Payload.IdentityPayload)

  #if !swift(>=4.1)
    public static func ==(lhs: Anytype_Model_Metadata.OneOf_Payload, rhs: Anytype_Model_Metadata.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.identity, .identity):
          return {
                  guard case .identity(let l) = lhs, case .identity(let r) = rhs else {
                      preconditionFailure()
                  }
                  return l == r
                }()
      }
    }
  #endif
  }

  public init() {
  }
}
extension Anytype_Model_Metadata: @unchecked Sendable {
}

extension Anytype_Model_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Metadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
                  var v: Anytype_Model_Metadata.Payload.IdentityPayload?
                  var hadOneofValue = false
                  if let current = self.payload {
                    hadOneofValue = true
                    if case .identity(let m) = current {
                        v = m
                    }
                  }
                  try decoder.decodeSingularMessageField(value: &v)
                  if let v = v {
                    if hadOneofValue {
                        try decoder.handleConflictingOneOf()
                    }
                    self.payload = .identity(v)
                  }
                }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try {
        if case .identity(let v)? = self.payload {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
    }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Metadata, rhs: Anytype_Model_Metadata) -> Bool {
    if lhs.payload != rhs.payload {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}