// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content {
    public struct Bookmark: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var url: String = String()

      /// Deprecated. Get this data from the target object.
      public var title: String = String()

      /// Deprecated. Get this data from the target object.
      public var description_p: String = String()

      /// Deprecated. Get this data from the target object.
      public var imageHash: String = String()

      /// Deprecated. Get this data from the target object.
      public var faviconHash: String = String()

      public var type: Anytype_Model_LinkPreview.TypeEnum = .unknown

      public var targetObjectID: String = String()

      public var state: Anytype_Model_Block.Content.Bookmark.State = .empty

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum State: SwiftProtobuf.Enum, Swift.CaseIterable {
        public typealias RawValue = Int
        case empty // = 0
        case fetching // = 1
        case done // = 2
        case error // = 3
        case UNRECOGNIZED(Int)

        public init() {
          self = .empty
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .empty
          case 1: self = .fetching
          case 2: self = .done
          case 3: self = .error
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .empty: return 0
          case .fetching: return 1
          case .done: return 2
          case .error: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static let allCases: [Anytype_Model_Block.Content.Bookmark.State] = [
          .empty,
          .fetching,
          .done,
          .error,
        ]

      }

      public init() {}
    }    
}

extension Anytype_Model_Block.Content.Bookmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Bookmark"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "imageHash"),
    5: .same(proto: "faviconHash"),
    6: .same(proto: "type"),
    7: .same(proto: "targetObjectId"),
    8: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.imageHash) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.faviconHash) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.targetObjectID) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.imageHash.isEmpty {
      try visitor.visitSingularStringField(value: self.imageHash, fieldNumber: 4)
    }
    if !self.faviconHash.isEmpty {
      try visitor.visitSingularStringField(value: self.faviconHash, fieldNumber: 5)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 6)
    }
    if !self.targetObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetObjectID, fieldNumber: 7)
    }
    if self.state != .empty {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Bookmark, rhs: Anytype_Model_Block.Content.Bookmark) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.imageHash != rhs.imageHash {return false}
    if lhs.faviconHash != rhs.faviconHash {return false}
    if lhs.type != rhs.type {return false}
    if lhs.targetObjectID != rhs.targetObjectID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Bookmark.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Empty"),
    1: .same(proto: "Fetching"),
    2: .same(proto: "Done"),
    3: .same(proto: "Error"),
  ]
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
