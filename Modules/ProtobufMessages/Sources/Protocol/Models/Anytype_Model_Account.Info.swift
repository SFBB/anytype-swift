// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Account {
    public struct Info {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// home dashboard block id
    public var homeObjectID: String = String()

    /// archive block id
    public var archiveObjectID: String = String()

    /// profile block id
    public var profileObjectID: String = String()

    /// marketplace workspace id
    public var marketplaceWorkspaceID: String = String()

    /// workspace object id. used for space-level chat
    public var workspaceObjectID: String = String()

    public var deviceID: String = String()

    /// the first created private space. It's filled only when account is created
    public var accountSpaceID: String = String()

    public var widgetsID: String = String()

    public var spaceViewID: String = String()

    public var techSpaceID: String = String()

    /// gateway url for fetching static files
    public var gatewayURL: String = String()

    /// path to local storage
    public var localStoragePath: String = String()

    /// time zone from config
    public var timeZone: String = String()

    public var analyticsID: String = String()

    /// network id to which anytype is connected
    public var networkID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }    
}
extension Anytype_Model_Account.Info: @unchecked Sendable {}

extension Anytype_Model_Account.Info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Account.protoMessageName + ".Info"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "homeObjectId"),
    3: .same(proto: "archiveObjectId"),
    4: .same(proto: "profileObjectId"),
    11: .same(proto: "marketplaceWorkspaceId"),
    15: .same(proto: "workspaceObjectId"),
    8: .same(proto: "deviceId"),
    9: .same(proto: "accountSpaceId"),
    10: .same(proto: "widgetsId"),
    13: .same(proto: "spaceViewId"),
    14: .same(proto: "techSpaceId"),
    101: .same(proto: "gatewayUrl"),
    103: .same(proto: "localStoragePath"),
    104: .same(proto: "timeZone"),
    105: .same(proto: "analyticsId"),
    106: .same(proto: "networkId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.homeObjectID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.archiveObjectID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.profileObjectID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.accountSpaceID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.widgetsID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.marketplaceWorkspaceID) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.spaceViewID) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.techSpaceID) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.workspaceObjectID) }()
      case 101: try { try decoder.decodeSingularStringField(value: &self.gatewayURL) }()
      case 103: try { try decoder.decodeSingularStringField(value: &self.localStoragePath) }()
      case 104: try { try decoder.decodeSingularStringField(value: &self.timeZone) }()
      case 105: try { try decoder.decodeSingularStringField(value: &self.analyticsID) }()
      case 106: try { try decoder.decodeSingularStringField(value: &self.networkID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.homeObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.homeObjectID, fieldNumber: 2)
    }
    if !self.archiveObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.archiveObjectID, fieldNumber: 3)
    }
    if !self.profileObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.profileObjectID, fieldNumber: 4)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 8)
    }
    if !self.accountSpaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountSpaceID, fieldNumber: 9)
    }
    if !self.widgetsID.isEmpty {
      try visitor.visitSingularStringField(value: self.widgetsID, fieldNumber: 10)
    }
    if !self.marketplaceWorkspaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.marketplaceWorkspaceID, fieldNumber: 11)
    }
    if !self.spaceViewID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceViewID, fieldNumber: 13)
    }
    if !self.techSpaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.techSpaceID, fieldNumber: 14)
    }
    if !self.workspaceObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.workspaceObjectID, fieldNumber: 15)
    }
    if !self.gatewayURL.isEmpty {
      try visitor.visitSingularStringField(value: self.gatewayURL, fieldNumber: 101)
    }
    if !self.localStoragePath.isEmpty {
      try visitor.visitSingularStringField(value: self.localStoragePath, fieldNumber: 103)
    }
    if !self.timeZone.isEmpty {
      try visitor.visitSingularStringField(value: self.timeZone, fieldNumber: 104)
    }
    if !self.analyticsID.isEmpty {
      try visitor.visitSingularStringField(value: self.analyticsID, fieldNumber: 105)
    }
    if !self.networkID.isEmpty {
      try visitor.visitSingularStringField(value: self.networkID, fieldNumber: 106)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Account.Info, rhs: Anytype_Model_Account.Info) -> Bool {
    if lhs.homeObjectID != rhs.homeObjectID {return false}
    if lhs.archiveObjectID != rhs.archiveObjectID {return false}
    if lhs.profileObjectID != rhs.profileObjectID {return false}
    if lhs.marketplaceWorkspaceID != rhs.marketplaceWorkspaceID {return false}
    if lhs.workspaceObjectID != rhs.workspaceObjectID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.accountSpaceID != rhs.accountSpaceID {return false}
    if lhs.widgetsID != rhs.widgetsID {return false}
    if lhs.spaceViewID != rhs.spaceViewID {return false}
    if lhs.techSpaceID != rhs.techSpaceID {return false}
    if lhs.gatewayURL != rhs.gatewayURL {return false}
    if lhs.localStoragePath != rhs.localStoragePath {return false}
    if lhs.timeZone != rhs.timeZone {return false}
    if lhs.analyticsID != rhs.analyticsID {return false}
    if lhs.networkID != rhs.networkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
