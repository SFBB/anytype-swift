// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique message identifier
  public var id: String = String()

  /// Used for subscriptions
  public var orderID: String = String()

  /// Identifier for the message creator
  public var creator: String = String()

  public var createdAt: Int64 = 0

  public var modifiedAt: Int64 = 0

  /// Identifier for the message being replied to
  public var replyToMessageID: String = String()

  /// Message content
  public var message: Anytype_Model_ChatMessage.MessageContent {
    get {
        return _message ?? Anytype_Model_ChatMessage.MessageContent()
    }
    set {
        _message = newValue
    }
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {
      return self._message != nil
  }
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {
      self._message = nil
  }

  /// Attachments slice
  public var attachments: [Anytype_Model_ChatMessage.Attachment] = []

  /// Reactions to the message
  public var reactions: Anytype_Model_ChatMessage.Reactions {
    get {
        return _reactions ?? Anytype_Model_ChatMessage.Reactions()
    }
    set {
        _reactions = newValue
    }
  }
  /// Returns true if `reactions` has been explicitly set.
  public var hasReactions: Bool {
      return self._reactions != nil
  }
  /// Clears the value of `reactions`. Subsequent reads from it will return its default value.
  public mutating func clearReactions() {
      self._reactions = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {
  }

  fileprivate var _message: Anytype_Model_ChatMessage.MessageContent? = nil
  fileprivate var _reactions: Anytype_Model_ChatMessage.Reactions? = nil
}
extension Anytype_Model_ChatMessage: @unchecked Sendable {
}

extension Anytype_Model_ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "orderId"),
    3: .same(proto: "creator"),
    4: .same(proto: "createdAt"),
    9: .same(proto: "modifiedAt"),
    5: .same(proto: "replyToMessageId"),
    6: .same(proto: "message"),
    7: .same(proto: "attachments"),
    8: .same(proto: "reactions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.id)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.orderID)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.creator)
          }()
      case 4:
          try {
              try decoder.decodeSingularInt64Field(value: &self.createdAt)
          }()
      case 5:
          try {
              try decoder.decodeSingularStringField(value: &self.replyToMessageID)
          }()
      case 6:
          try {
              try decoder.decodeSingularMessageField(value: &self._message)
          }()
      case 7:
          try {
              try decoder.decodeRepeatedMessageField(value: &self.attachments)
          }()
      case 8:
          try {
              try decoder.decodeSingularMessageField(value: &self._reactions)
          }()
      case 9:
          try {
              try decoder.decodeSingularInt64Field(value: &self.modifiedAt)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 3)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 4)
    }
    if !self.replyToMessageID.isEmpty {
      try visitor.visitSingularStringField(value: self.replyToMessageID, fieldNumber: 5)
    }
    try {
        if let v = self._message {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
    }()
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 7)
    }
    try {
        if let v = self._reactions {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
    }()
    if self.modifiedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.modifiedAt, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ChatMessage, rhs: Anytype_Model_ChatMessage) -> Bool {
    if lhs.id != rhs.id {
        return false
    }
    if lhs.orderID != rhs.orderID {
        return false
    }
    if lhs.creator != rhs.creator {
        return false
    }
    if lhs.createdAt != rhs.createdAt {
        return false
    }
    if lhs.modifiedAt != rhs.modifiedAt {
        return false
    }
    if lhs.replyToMessageID != rhs.replyToMessageID {
        return false
    }
    if lhs._message != rhs._message {
        return false
    }
    if lhs.attachments != rhs.attachments {
        return false
    }
    if lhs._reactions != rhs._reactions {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}