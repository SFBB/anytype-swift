// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_LinkPreview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var imageURL: String = String()

  public var faviconURL: String = String()

  public var type: Anytype_Model_LinkPreview.TypeEnum = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case page // = 1
    case image // = 2
    case text // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .unknown
      case 1:
          self = .page
      case 2:
          self = .image
      case 3:
          self = .text
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown:
          return 0
      case .page:
          return 1
      case .image:
          return 2
      case .text:
          return 3
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }

  public init() {
  }
}
extension Anytype_Model_LinkPreview: @unchecked Sendable {
}

extension Anytype_Model_LinkPreview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LinkPreview"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "imageUrl"),
    5: .same(proto: "faviconUrl"),
    6: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.url)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.title)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.description_p)
          }()
      case 4:
          try {
              try decoder.decodeSingularStringField(value: &self.imageURL)
          }()
      case 5:
          try {
              try decoder.decodeSingularStringField(value: &self.faviconURL)
          }()
      case 6:
          try {
              try decoder.decodeSingularEnumField(value: &self.type)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 4)
    }
    if !self.faviconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.faviconURL, fieldNumber: 5)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_LinkPreview, rhs: Anytype_Model_LinkPreview) -> Bool {
    if lhs.url != rhs.url {
        return false
    }
    if lhs.title != rhs.title {
        return false
    }
    if lhs.description_p != rhs.description_p {
        return false
    }
    if lhs.imageURL != rhs.imageURL {
        return false
    }
    if lhs.faviconURL != rhs.faviconURL {
        return false
    }
    if lhs.type != rhs.type {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}