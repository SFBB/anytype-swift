// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_ObjectType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// leave empty in case you want to create the new one
  public var url: String = String()

  /// name of objectType (can be localized for bundled types)
  public var name: String = String()

  /// cannot contain more than one Relation with the same RelationType
  public var relationLinks: [Anytype_Model_RelationLink] = []

  public var layout: Anytype_Model_ObjectType.Layout = .basic

  /// emoji symbol
  public var iconEmoji: String = String()

  public var description_p: String = String()

  public var hidden: Bool = false

  public var readonly: Bool = false

  public var types: [Anytype_Model_SmartBlockType] = []

  /// sets locally to hide object type from set and some other places
  public var isArchived: Bool = false

  public var installedByDefault: Bool = false

  /// name of objectType (can be localized for bundled types)
  public var key: String = String()

  /// revision of system objectType. Used to check if we should change type content or not
  public var revision: Int64 = 0

  /// restricts creating objects of this type for users
  public var restrictObjectCreation: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Layout: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case basic // = 0
    case profile // = 1
    case todo // = 2
    case set // = 3
    case objectType // = 4
    case relation // = 5
    case file // = 6
    case dashboard // = 7
    case image // = 8
    case note // = 9
    case space // = 10
    case bookmark // = 11
    case relationOptionsList // = 12
    case relationOption // = 13
    case collection // = 14
    case audio // = 15
    case video // = 16
    case date // = 17
    case spaceView // = 18
    case participant // = 19
    case pdf // = 20

    /// deprecated
    case chat // = 21
    case chatDerived // = 22
    case tag // = 23
    case UNRECOGNIZED(Int)

    public init() {
      self = .basic
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .basic
      case 1:
          self = .profile
      case 2:
          self = .todo
      case 3:
          self = .set
      case 4:
          self = .objectType
      case 5:
          self = .relation
      case 6:
          self = .file
      case 7:
          self = .dashboard
      case 8:
          self = .image
      case 9:
          self = .note
      case 10:
          self = .space
      case 11:
          self = .bookmark
      case 12:
          self = .relationOptionsList
      case 13:
          self = .relationOption
      case 14:
          self = .collection
      case 15:
          self = .audio
      case 16:
          self = .video
      case 17:
          self = .date
      case 18:
          self = .spaceView
      case 19:
          self = .participant
      case 20:
          self = .pdf
      case 21:
          self = .chat
      case 22:
          self = .chatDerived
      case 23:
          self = .tag
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .basic:
          return 0
      case .profile:
          return 1
      case .todo:
          return 2
      case .set:
          return 3
      case .objectType:
          return 4
      case .relation:
          return 5
      case .file:
          return 6
      case .dashboard:
          return 7
      case .image:
          return 8
      case .note:
          return 9
      case .space:
          return 10
      case .bookmark:
          return 11
      case .relationOptionsList:
          return 12
      case .relationOption:
          return 13
      case .collection:
          return 14
      case .audio:
          return 15
      case .video:
          return 16
      case .date:
          return 17
      case .spaceView:
          return 18
      case .participant:
          return 19
      case .pdf:
          return 20
      case .chat:
          return 21
      case .chatDerived:
          return 22
      case .tag:
          return 23
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }

  public init() {
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {
  }
  typealias Version = _2
}
extension Anytype_Model_ObjectType: @unchecked Sendable {
}

extension Anytype_Model_ObjectType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "name"),
    3: .same(proto: "relationLinks"),
    4: .same(proto: "layout"),
    5: .same(proto: "iconEmoji"),
    6: .same(proto: "description"),
    7: .same(proto: "hidden"),
    10: .same(proto: "readonly"),
    8: .same(proto: "types"),
    9: .same(proto: "isArchived"),
    11: .same(proto: "installedByDefault"),
    12: .same(proto: "key"),
    13: .same(proto: "revision"),
    14: .same(proto: "restrictObjectCreation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.url)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.name)
          }()
      case 3:
          try {
              try decoder.decodeRepeatedMessageField(value: &self.relationLinks)
          }()
      case 4:
          try {
              try decoder.decodeSingularEnumField(value: &self.layout)
          }()
      case 5:
          try {
              try decoder.decodeSingularStringField(value: &self.iconEmoji)
          }()
      case 6:
          try {
              try decoder.decodeSingularStringField(value: &self.description_p)
          }()
      case 7:
          try {
              try decoder.decodeSingularBoolField(value: &self.hidden)
          }()
      case 8:
          try {
              try decoder.decodeRepeatedEnumField(value: &self.types)
          }()
      case 9:
          try {
              try decoder.decodeSingularBoolField(value: &self.isArchived)
          }()
      case 10:
          try {
              try decoder.decodeSingularBoolField(value: &self.readonly)
          }()
      case 11:
          try {
              try decoder.decodeSingularBoolField(value: &self.installedByDefault)
          }()
      case 12:
          try {
              try decoder.decodeSingularStringField(value: &self.key)
          }()
      case 13:
          try {
              try decoder.decodeSingularInt64Field(value: &self.revision)
          }()
      case 14:
          try {
              try decoder.decodeSingularBoolField(value: &self.restrictObjectCreation)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.relationLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relationLinks, fieldNumber: 3)
    }
    if self.layout != .basic {
      try visitor.visitSingularEnumField(value: self.layout, fieldNumber: 4)
    }
    if !self.iconEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.iconEmoji, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if self.hidden != false {
      try visitor.visitSingularBoolField(value: self.hidden, fieldNumber: 7)
    }
    if !self.types.isEmpty {
      try visitor.visitPackedEnumField(value: self.types, fieldNumber: 8)
    }
    if self.isArchived != false {
      try visitor.visitSingularBoolField(value: self.isArchived, fieldNumber: 9)
    }
    if self.readonly != false {
      try visitor.visitSingularBoolField(value: self.readonly, fieldNumber: 10)
    }
    if self.installedByDefault != false {
      try visitor.visitSingularBoolField(value: self.installedByDefault, fieldNumber: 11)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 12)
    }
    if self.revision != 0 {
      try visitor.visitSingularInt64Field(value: self.revision, fieldNumber: 13)
    }
    if self.restrictObjectCreation != false {
      try visitor.visitSingularBoolField(value: self.restrictObjectCreation, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectType, rhs: Anytype_Model_ObjectType) -> Bool {
    if lhs.url != rhs.url {
        return false
    }
    if lhs.name != rhs.name {
        return false
    }
    if lhs.relationLinks != rhs.relationLinks {
        return false
    }
    if lhs.layout != rhs.layout {
        return false
    }
    if lhs.iconEmoji != rhs.iconEmoji {
        return false
    }
    if lhs.description_p != rhs.description_p {
        return false
    }
    if lhs.hidden != rhs.hidden {
        return false
    }
    if lhs.readonly != rhs.readonly {
        return false
    }
    if lhs.types != rhs.types {
        return false
    }
    if lhs.isArchived != rhs.isArchived {
        return false
    }
    if lhs.installedByDefault != rhs.installedByDefault {
        return false
    }
    if lhs.key != rhs.key {
        return false
    }
    if lhs.revision != rhs.revision {
        return false
    }
    if lhs.restrictObjectCreation != rhs.restrictObjectCreation {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}