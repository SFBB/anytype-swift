// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_Membership {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// it was Tier before, changed to int32 to allow dynamic values
  public var tier: UInt32 = 0

  public var status: Anytype_Model_Membership.Status = .unknown

  public var dateStarted: UInt64 = 0

  public var dateEnds: UInt64 = 0

  public var isAutoRenew: Bool = false

  public var paymentMethod: Anytype_Model_Membership.PaymentMethod = .methodNone

  /// can be empty if user did not ask for any name
  public var nsName: String = String()

  public var nsNameType: Anytype_Model_NameserviceNameType = .anyName

  /// if the email was verified by the user or set during the checkout - it will be here
  public var userEmail: String = String()

  public var subscribeToNewsletter: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// please wait a bit more, we are still processing your request
    /// the payment is confirmed, but we need more time to do some side-effects:
    /// - increase limits
    /// - send emails
    /// - allocate names
    case pending // = 1

    /// the membership is active, ready to use!
    case active // = 2

    /// in some cases we need to finalize the process:
    /// - if user has bought membership directly without first calling
    /// the BuySubscription method
    /// in this case please call Finalize to finish the process
    case pendingRequiresFinalization // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .unknown
      case 1:
          self = .pending
      case 2:
          self = .active
      case 3:
          self = .pendingRequiresFinalization
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown:
          return 0
      case .pending:
          return 1
      case .active:
          return 2
      case .pendingRequiresFinalization:
          return 3
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }

  public enum PaymentMethod: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case methodNone // = 0
    case methodStripe // = 1
    case methodCrypto // = 2
    case methodInappApple // = 3
    case methodInappGoogle // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .methodNone
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .methodNone
      case 1:
          self = .methodStripe
      case 2:
          self = .methodCrypto
      case 3:
          self = .methodInappApple
      case 4:
          self = .methodInappGoogle
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .methodNone:
          return 0
      case .methodStripe:
          return 1
      case .methodCrypto:
          return 2
      case .methodInappApple:
          return 3
      case .methodInappGoogle:
          return 4
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }

  public enum EmailVerificationStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// user NEVER comleted the verification of the email
    case statusNotVerified // = 0

    /// user has asked for new code, but did not enter it yet
    /// (even if email was verified before, you can ask to UPDATE your e-mail)
    /// please wait, you can not ask for more codes yet
    case statusCodeSent // = 1

    /// the e-mail is finally verified
    case statusVerified // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .statusNotVerified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .statusNotVerified
      case 1:
          self = .statusCodeSent
      case 2:
          self = .statusVerified
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .statusNotVerified:
          return 0
      case .statusCodeSent:
          return 1
      case .statusVerified:
          return 2
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }

  public init() {
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {
  }
  typealias Version = _2
}
extension Anytype_Model_Membership: @unchecked Sendable {
}

extension Anytype_Model_Membership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Membership"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tier"),
    2: .same(proto: "status"),
    3: .same(proto: "dateStarted"),
    4: .same(proto: "dateEnds"),
    5: .same(proto: "isAutoRenew"),
    6: .same(proto: "paymentMethod"),
    7: .same(proto: "nsName"),
    8: .same(proto: "nsNameType"),
    9: .same(proto: "userEmail"),
    10: .same(proto: "subscribeToNewsletter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularUInt32Field(value: &self.tier)
          }()
      case 2:
          try {
              try decoder.decodeSingularEnumField(value: &self.status)
          }()
      case 3:
          try {
              try decoder.decodeSingularUInt64Field(value: &self.dateStarted)
          }()
      case 4:
          try {
              try decoder.decodeSingularUInt64Field(value: &self.dateEnds)
          }()
      case 5:
          try {
              try decoder.decodeSingularBoolField(value: &self.isAutoRenew)
          }()
      case 6:
          try {
              try decoder.decodeSingularEnumField(value: &self.paymentMethod)
          }()
      case 7:
          try {
              try decoder.decodeSingularStringField(value: &self.nsName)
          }()
      case 8:
          try {
              try decoder.decodeSingularEnumField(value: &self.nsNameType)
          }()
      case 9:
          try {
              try decoder.decodeSingularStringField(value: &self.userEmail)
          }()
      case 10:
          try {
              try decoder.decodeSingularBoolField(value: &self.subscribeToNewsletter)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tier != 0 {
      try visitor.visitSingularUInt32Field(value: self.tier, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.dateStarted != 0 {
      try visitor.visitSingularUInt64Field(value: self.dateStarted, fieldNumber: 3)
    }
    if self.dateEnds != 0 {
      try visitor.visitSingularUInt64Field(value: self.dateEnds, fieldNumber: 4)
    }
    if self.isAutoRenew != false {
      try visitor.visitSingularBoolField(value: self.isAutoRenew, fieldNumber: 5)
    }
    if self.paymentMethod != .methodNone {
      try visitor.visitSingularEnumField(value: self.paymentMethod, fieldNumber: 6)
    }
    if !self.nsName.isEmpty {
      try visitor.visitSingularStringField(value: self.nsName, fieldNumber: 7)
    }
    if self.nsNameType != .anyName {
      try visitor.visitSingularEnumField(value: self.nsNameType, fieldNumber: 8)
    }
    if !self.userEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.userEmail, fieldNumber: 9)
    }
    if self.subscribeToNewsletter != false {
      try visitor.visitSingularBoolField(value: self.subscribeToNewsletter, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Membership, rhs: Anytype_Model_Membership) -> Bool {
    if lhs.tier != rhs.tier {
        return false
    }
    if lhs.status != rhs.status {
        return false
    }
    if lhs.dateStarted != rhs.dateStarted {
        return false
    }
    if lhs.dateEnds != rhs.dateEnds {
        return false
    }
    if lhs.isAutoRenew != rhs.isAutoRenew {
        return false
    }
    if lhs.paymentMethod != rhs.paymentMethod {
        return false
    }
    if lhs.nsName != rhs.nsName {
        return false
    }
    if lhs.nsNameType != rhs.nsNameType {
        return false
    }
    if lhs.userEmail != rhs.userEmail {
        return false
    }
    if lhs.subscribeToNewsletter != rhs.subscribeToNewsletter {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}