// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_Export {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Format: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case markdown // = 0
    case protobuf // = 1
    case json // = 2
    case dot // = 3
    case svg // = 4
    case graphJson // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .markdown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0:
          self = .markdown
      case 1:
          self = .protobuf
      case 2:
          self = .json
      case 3:
          self = .dot
      case 4:
          self = .svg
      case 5:
          self = .graphJson
      default:
          self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .markdown:
          return 0
      case .protobuf:
          return 1
      case .json:
          return 2
      case .dot:
          return 3
      case .svg:
          return 4
      case .graphJson:
          return 5
      case .UNRECOGNIZED(let i):
          return i
      }
    }

  }

  public init() {
  }
}
extension Anytype_Model_Export: @unchecked Sendable {
}

extension Anytype_Model_Export: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Export"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Export, rhs: Anytype_Model_Export) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}