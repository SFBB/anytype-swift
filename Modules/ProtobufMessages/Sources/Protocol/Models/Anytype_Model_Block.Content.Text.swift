// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Model_Block.Content {
    public struct Text {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var text: String = String()

      public var style: Anytype_Model_Block.Content.Text.Style = .paragraph

      /// list of marks to apply to the text
      public var marks: Anytype_Model_Block.Content.Text.Marks {
        get {
                return _marks ?? Anytype_Model_Block.Content.Text.Marks()
            }
        set {
                _marks = newValue
            }
      }
      /// Returns true if `marks` has been explicitly set.
      public var hasMarks: Bool {
              return self._marks != nil
          }
      /// Clears the value of `marks`. Subsequent reads from it will return its default value.
      public mutating func clearMarks() {
              self._marks = nil
          }

      public var checked: Bool = false

      public var color: String = String()

      /// used with style Callout
      public var iconEmoji: String = String()

      /// in case both image and emoji are set, image should has a priority in the UI
      public var iconImage: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum Style: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case paragraph // = 0
        case header1 // = 1
        case header2 // = 2
        case header3 // = 3

        /// deprecated
        case header4 // = 4
        case quote // = 5
        case code // = 6

        /// currently only one block of this style can exists on a page
        case title // = 7
        case checkbox // = 8
        case marked // = 9
        case numbered // = 10
        case toggle // = 11

        /// currently only one block of this style can exists on a page
        case description_ // = 12
        case callout // = 13
        case UNRECOGNIZED(Int)

        public init() {
          self = .paragraph
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0:
                  self = .paragraph
          case 1:
                  self = .header1
          case 2:
                  self = .header2
          case 3:
                  self = .header3
          case 4:
                  self = .header4
          case 5:
                  self = .quote
          case 6:
                  self = .code
          case 7:
                  self = .title
          case 8:
                  self = .checkbox
          case 9:
                  self = .marked
          case 10:
                  self = .numbered
          case 11:
                  self = .toggle
          case 12:
                  self = .description_
          case 13:
                  self = .callout
          default:
                  self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .paragraph:
                  return 0
          case .header1:
                  return 1
          case .header2:
                  return 2
          case .header3:
                  return 3
          case .header4:
                  return 4
          case .quote:
                  return 5
          case .code:
                  return 6
          case .title:
                  return 7
          case .checkbox:
                  return 8
          case .marked:
                  return 9
          case .numbered:
                  return 10
          case .toggle:
                  return 11
          case .description_:
                  return 12
          case .callout:
                  return 13
          case .UNRECOGNIZED(let i):
                  return i
          }
        }

      }

      public struct Marks {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var marks: [Anytype_Model_Block.Content.Text.Mark] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {
            }
      }

      public struct Mark {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// range of symbols to apply this mark. From(symbol) To(symbol)
        public var range: Anytype_Model_Range {
          get {
                  return _range ?? Anytype_Model_Range()
              }
          set {
                  _range = newValue
              }
        }
        /// Returns true if `range` has been explicitly set.
        public var hasRange: Bool {
                return self._range != nil
            }
        /// Clears the value of `range`. Subsequent reads from it will return its default value.
        public mutating func clearRange() {
                self._range = nil
            }

        public var type: Anytype_Model_Block.Content.Text.Mark.TypeEnum = .strikethrough

        /// link, color, etc
        public var param: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum TypeEnum: SwiftProtobuf.Enum {
          public typealias RawValue = Int
          case strikethrough // = 0
          case keyboard // = 1
          case italic // = 2
          case bold // = 3
          case underscored // = 4
          case link // = 5
          case textColor // = 6
          case backgroundColor // = 7
          case mention // = 8
          case emoji // = 9
          case object // = 10
          case UNRECOGNIZED(Int)

          public init() {
            self = .strikethrough
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0:
                    self = .strikethrough
            case 1:
                    self = .keyboard
            case 2:
                    self = .italic
            case 3:
                    self = .bold
            case 4:
                    self = .underscored
            case 5:
                    self = .link
            case 6:
                    self = .textColor
            case 7:
                    self = .backgroundColor
            case 8:
                    self = .mention
            case 9:
                    self = .emoji
            case 10:
                    self = .object
            default:
                    self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .strikethrough:
                    return 0
            case .keyboard:
                    return 1
            case .italic:
                    return 2
            case .bold:
                    return 3
            case .underscored:
                    return 4
            case .link:
                    return 5
            case .textColor:
                    return 6
            case .backgroundColor:
                    return 7
            case .mention:
                    return 8
            case .emoji:
                    return 9
            case .object:
                    return 10
            case .UNRECOGNIZED(let i):
                    return i
            }
          }

        }

        public init() {
            }

        fileprivate var _range: Anytype_Model_Range? = nil
      }

      public init() {
          }

      fileprivate var _marks: Anytype_Model_Block.Content.Text.Marks? = nil
    }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {
  }
  typealias Version = _2
}

extension Anytype_Model_Block.Content.Text.Style: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Block.Content.Text.Style] = [
    .paragraph,
    .header1,
    .header2,
    .header3,
    .header4,
    .quote,
    .code,
    .title,
    .checkbox,
    .marked,
    .numbered,
    .toggle,
    .description_,
    .callout,
  ]
}

extension Anytype_Model_Block.Content.Text.Mark.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Model_Block.Content.Text.Mark.TypeEnum] = [
    .strikethrough,
    .keyboard,
    .italic,
    .bold,
    .underscored,
    .link,
    .textColor,
    .backgroundColor,
    .mention,
    .emoji,
    .object,
  ]
}
extension Anytype_Model_Block.Content.Text: @unchecked Sendable {
}
extension Anytype_Model_Block.Content.Text.Style: @unchecked Sendable {
}
extension Anytype_Model_Block.Content.Text.Marks: @unchecked Sendable {
}
extension Anytype_Model_Block.Content.Text.Mark: @unchecked Sendable {
}
extension Anytype_Model_Block.Content.Text.Mark.TypeEnum: @unchecked Sendable {
}

extension Anytype_Model_Block.Content.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "style"),
    3: .same(proto: "marks"),
    4: .same(proto: "checked"),
    5: .same(proto: "color"),
    6: .same(proto: "iconEmoji"),
    7: .same(proto: "iconImage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.text)
          }()
      case 2:
          try {
              try decoder.decodeSingularEnumField(value: &self.style)
          }()
      case 3:
          try {
              try decoder.decodeSingularMessageField(value: &self._marks)
          }()
      case 4:
          try {
              try decoder.decodeSingularBoolField(value: &self.checked)
          }()
      case 5:
          try {
              try decoder.decodeSingularStringField(value: &self.color)
          }()
      case 6:
          try {
              try decoder.decodeSingularStringField(value: &self.iconEmoji)
          }()
      case 7:
          try {
              try decoder.decodeSingularStringField(value: &self.iconImage)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.style != .paragraph {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 2)
    }
    try {
        if let v = self._marks {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
    }()
    if self.checked != false {
      try visitor.visitSingularBoolField(value: self.checked, fieldNumber: 4)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 5)
    }
    if !self.iconEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.iconEmoji, fieldNumber: 6)
    }
    if !self.iconImage.isEmpty {
      try visitor.visitSingularStringField(value: self.iconImage, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Text, rhs: Anytype_Model_Block.Content.Text) -> Bool {
    if lhs.text != rhs.text {
        return false
    }
    if lhs.style != rhs.style {
        return false
    }
    if lhs._marks != rhs._marks {
        return false
    }
    if lhs.checked != rhs.checked {
        return false
    }
    if lhs.color != rhs.color {
        return false
    }
    if lhs.iconEmoji != rhs.iconEmoji {
        return false
    }
    if lhs.iconImage != rhs.iconImage {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Model_Block.Content.Text.Style: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Paragraph"),
    1: .same(proto: "Header1"),
    2: .same(proto: "Header2"),
    3: .same(proto: "Header3"),
    4: .same(proto: "Header4"),
    5: .same(proto: "Quote"),
    6: .same(proto: "Code"),
    7: .same(proto: "Title"),
    8: .same(proto: "Checkbox"),
    9: .same(proto: "Marked"),
    10: .same(proto: "Numbered"),
    11: .same(proto: "Toggle"),
    12: .same(proto: "Description"),
    13: .same(proto: "Callout"),
  ]
}

extension Anytype_Model_Block.Content.Text.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.Text.protoMessageName + ".Marks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "marks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeRepeatedMessageField(value: &self.marks)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.marks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.marks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Text.Marks, rhs: Anytype_Model_Block.Content.Text.Marks) -> Bool {
    if lhs.marks != rhs.marks {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Model_Block.Content.Text.Mark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.Text.protoMessageName + ".Mark"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "range"),
    2: .same(proto: "type"),
    3: .same(proto: "param"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularMessageField(value: &self._range)
          }()
      case 2:
          try {
              try decoder.decodeSingularEnumField(value: &self.type)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.param)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try {
        if let v = self._range {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
    }()
    if self.type != .strikethrough {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.param.isEmpty {
      try visitor.visitSingularStringField(value: self.param, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Text.Mark, rhs: Anytype_Model_Block.Content.Text.Mark) -> Bool {
    if lhs._range != rhs._range {
        return false
    }
    if lhs.type != rhs.type {
        return false
    }
    if lhs.param != rhs.param {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Model_Block.Content.Text.Mark.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Strikethrough"),
    1: .same(proto: "Keyboard"),
    2: .same(proto: "Italic"),
    3: .same(proto: "Bold"),
    4: .same(proto: "Underscored"),
    5: .same(proto: "Link"),
    6: .same(proto: "TextColor"),
    7: .same(proto: "BackgroundColor"),
    8: .same(proto: "Mention"),
    9: .same(proto: "Emoji"),
    10: .same(proto: "Object"),
  ]
}