// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Rpc.Block {
    public struct ListMoveToExistingObject {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var contextID: String = String()

        public var blockIds: [String] = []

        public var targetContextID: String = String()

        /// id of the simple block to insert considering position
        public var dropTargetID: String = String()

        /// position relatively to the dropTargetId simple block
        public var position: Anytype_Model_Block.Position = .none

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {
            }
      }

      public struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var error: Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error {
          get {
                  return _error ?? Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error()
              }
          set {
                  _error = newValue
              }
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {
                return self._error != nil
            }
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {
                self._error = nil
            }

        public var event: Anytype_ResponseEvent {
          get {
                  return _event ?? Anytype_ResponseEvent()
              }
          set {
                  _event = newValue
              }
        }
        /// Returns true if `event` has been explicitly set.
        public var hasEvent: Bool {
                return self._event != nil
            }
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        public mutating func clearEvent() {
                self._event = nil
            }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0:
                      self = .null
              case 1:
                      self = .unknownError
              case 2:
                      self = .badInput
              default:
                      self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null:
                      return 0
              case .unknownError:
                      return 1
              case .badInput:
                      return 2
              case .UNRECOGNIZED(let i):
                      return i
              }
            }

          }

          public init() {
              }
        }

        public init() {
            }

        fileprivate var _error: Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      public init() {
          }
    }
}

extension Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
  ]
}
extension Anytype_Rpc.Block.ListMoveToExistingObject: @unchecked Sendable {
}
extension Anytype_Rpc.Block.ListMoveToExistingObject.Request: @unchecked Sendable {
}
extension Anytype_Rpc.Block.ListMoveToExistingObject.Response: @unchecked Sendable {
}
extension Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error: @unchecked Sendable {
}
extension Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error.Code: @unchecked Sendable {
}

extension Anytype_Rpc.Block.ListMoveToExistingObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".ListMoveToExistingObject"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.ListMoveToExistingObject, rhs: Anytype_Rpc.Block.ListMoveToExistingObject) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.ListMoveToExistingObject.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.ListMoveToExistingObject.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "targetContextId"),
    4: .same(proto: "dropTargetId"),
    5: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.contextID)
          }()
      case 2:
          try {
              try decoder.decodeRepeatedStringField(value: &self.blockIds)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.targetContextID)
          }()
      case 4:
          try {
              try decoder.decodeSingularStringField(value: &self.dropTargetID)
          }()
      case 5:
          try {
              try decoder.decodeSingularEnumField(value: &self.position)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if !self.targetContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetContextID, fieldNumber: 3)
    }
    if !self.dropTargetID.isEmpty {
      try visitor.visitSingularStringField(value: self.dropTargetID, fieldNumber: 4)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.ListMoveToExistingObject.Request, rhs: Anytype_Rpc.Block.ListMoveToExistingObject.Request) -> Bool {
    if lhs.contextID != rhs.contextID {
        return false
    }
    if lhs.blockIds != rhs.blockIds {
        return false
    }
    if lhs.targetContextID != rhs.targetContextID {
        return false
    }
    if lhs.dropTargetID != rhs.dropTargetID {
        return false
    }
    if lhs.position != rhs.position {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.ListMoveToExistingObject.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.ListMoveToExistingObject.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularMessageField(value: &self._error)
          }()
      case 2:
          try {
              try decoder.decodeSingularMessageField(value: &self._event)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try {
        if let v = self._error {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
    }()
    try {
        if let v = self._event {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
    }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.ListMoveToExistingObject.Response, rhs: Anytype_Rpc.Block.ListMoveToExistingObject.Response) -> Bool {
    if lhs._error != rhs._error {
        return false
    }
    if lhs._event != rhs._event {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.ListMoveToExistingObject.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularEnumField(value: &self.code)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.description_p)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error, rhs: Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error) -> Bool {
    if lhs.code != rhs.code {
        return false
    }
    if lhs.description_p != rhs.description_p {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.ListMoveToExistingObject.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}