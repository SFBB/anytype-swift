// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Rpc.Block {
    public struct Paste {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var contextID: String = String()

        public var focusedBlockID: String = String()

        public var selectedTextRange: Anytype_Model_Range {
          get {
                  return _selectedTextRange ?? Anytype_Model_Range()
              }
          set {
                  _selectedTextRange = newValue
              }
        }
        /// Returns true if `selectedTextRange` has been explicitly set.
        public var hasSelectedTextRange: Bool {
                return self._selectedTextRange != nil
            }
        /// Clears the value of `selectedTextRange`. Subsequent reads from it will return its default value.
        public mutating func clearSelectedTextRange() {
                self._selectedTextRange = nil
            }

        public var selectedBlockIds: [String] = []

        public var isPartOfBlock: Bool = false

        public var textSlot: String = String()

        public var htmlSlot: String = String()

        public var anySlot: [Anytype_Model_Block] = []

        public var fileSlot: [Anytype_Rpc.Block.Paste.Request.File] = []

        public var url: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct File {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var name: String = String()

          public var data: Data = Data()

          public var localPath: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {
              }
        }

        public init() {
            }

        fileprivate var _selectedTextRange: Anytype_Model_Range? = nil
      }

      public struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var error: Anytype_Rpc.Block.Paste.Response.Error {
          get {
                  return _error ?? Anytype_Rpc.Block.Paste.Response.Error()
              }
          set {
                  _error = newValue
              }
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {
                return self._error != nil
            }
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {
                self._error = nil
            }

        public var blockIds: [String] = []

        public var caretPosition: Int32 = 0

        public var isSameBlockCaret: Bool = false

        public var event: Anytype_ResponseEvent {
          get {
                  return _event ?? Anytype_ResponseEvent()
              }
          set {
                  _event = newValue
              }
        }
        /// Returns true if `event` has been explicitly set.
        public var hasEvent: Bool {
                return self._event != nil
            }
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        public mutating func clearEvent() {
                self._event = nil
            }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Block.Paste.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0:
                      self = .null
              case 1:
                      self = .unknownError
              case 2:
                      self = .badInput
              default:
                      self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null:
                      return 0
              case .unknownError:
                      return 1
              case .badInput:
                      return 2
              case .UNRECOGNIZED(let i):
                      return i
              }
            }

          }

          public init() {
              }
        }

        public init() {
            }

        fileprivate var _error: Anytype_Rpc.Block.Paste.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      public init() {
          }
    }
}

extension Anytype_Rpc.Block.Paste: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.protoMessageName + ".Paste"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.Paste, rhs: Anytype_Rpc.Block.Paste) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.Paste.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contextId"),
    2: .same(proto: "focusedBlockId"),
    3: .same(proto: "selectedTextRange"),
    4: .same(proto: "selectedBlockIds"),
    5: .same(proto: "isPartOfBlock"),
    6: .same(proto: "textSlot"),
    7: .same(proto: "htmlSlot"),
    8: .same(proto: "anySlot"),
    9: .same(proto: "fileSlot"),
    10: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.contextID)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.focusedBlockID)
          }()
      case 3:
          try {
              try decoder.decodeSingularMessageField(value: &self._selectedTextRange)
          }()
      case 4:
          try {
              try decoder.decodeRepeatedStringField(value: &self.selectedBlockIds)
          }()
      case 5:
          try {
              try decoder.decodeSingularBoolField(value: &self.isPartOfBlock)
          }()
      case 6:
          try {
              try decoder.decodeSingularStringField(value: &self.textSlot)
          }()
      case 7:
          try {
              try decoder.decodeSingularStringField(value: &self.htmlSlot)
          }()
      case 8:
          try {
              try decoder.decodeRepeatedMessageField(value: &self.anySlot)
          }()
      case 9:
          try {
              try decoder.decodeRepeatedMessageField(value: &self.fileSlot)
          }()
      case 10:
          try {
              try decoder.decodeSingularStringField(value: &self.url)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 1)
    }
    if !self.focusedBlockID.isEmpty {
      try visitor.visitSingularStringField(value: self.focusedBlockID, fieldNumber: 2)
    }
    try {
        if let v = self._selectedTextRange {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
    }()
    if !self.selectedBlockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.selectedBlockIds, fieldNumber: 4)
    }
    if self.isPartOfBlock != false {
      try visitor.visitSingularBoolField(value: self.isPartOfBlock, fieldNumber: 5)
    }
    if !self.textSlot.isEmpty {
      try visitor.visitSingularStringField(value: self.textSlot, fieldNumber: 6)
    }
    if !self.htmlSlot.isEmpty {
      try visitor.visitSingularStringField(value: self.htmlSlot, fieldNumber: 7)
    }
    if !self.anySlot.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.anySlot, fieldNumber: 8)
    }
    if !self.fileSlot.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileSlot, fieldNumber: 9)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.Paste.Request, rhs: Anytype_Rpc.Block.Paste.Request) -> Bool {
    if lhs.contextID != rhs.contextID {
        return false
    }
    if lhs.focusedBlockID != rhs.focusedBlockID {
        return false
    }
    if lhs._selectedTextRange != rhs._selectedTextRange {
        return false
    }
    if lhs.selectedBlockIds != rhs.selectedBlockIds {
        return false
    }
    if lhs.isPartOfBlock != rhs.isPartOfBlock {
        return false
    }
    if lhs.textSlot != rhs.textSlot {
        return false
    }
    if lhs.htmlSlot != rhs.htmlSlot {
        return false
    }
    if lhs.anySlot != rhs.anySlot {
        return false
    }
    if lhs.fileSlot != rhs.fileSlot {
        return false
    }
    if lhs.url != rhs.url {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Request.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.Paste.Request.protoMessageName + ".File"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "data"),
    3: .same(proto: "localPath"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.name)
          }()
      case 2:
          try {
              try decoder.decodeSingularBytesField(value: &self.data)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.localPath)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    if !self.localPath.isEmpty {
      try visitor.visitSingularStringField(value: self.localPath, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.Paste.Request.File, rhs: Anytype_Rpc.Block.Paste.Request.File) -> Bool {
    if lhs.name != rhs.name {
        return false
    }
    if lhs.data != rhs.data {
        return false
    }
    if lhs.localPath != rhs.localPath {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.Paste.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "blockIds"),
    3: .same(proto: "caretPosition"),
    4: .same(proto: "isSameBlockCaret"),
    5: .same(proto: "event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularMessageField(value: &self._error)
          }()
      case 2:
          try {
              try decoder.decodeRepeatedStringField(value: &self.blockIds)
          }()
      case 3:
          try {
              try decoder.decodeSingularInt32Field(value: &self.caretPosition)
          }()
      case 4:
          try {
              try decoder.decodeSingularBoolField(value: &self.isSameBlockCaret)
          }()
      case 5:
          try {
              try decoder.decodeSingularMessageField(value: &self._event)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try {
        if let v = self._error {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
    }()
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 2)
    }
    if self.caretPosition != 0 {
      try visitor.visitSingularInt32Field(value: self.caretPosition, fieldNumber: 3)
    }
    if self.isSameBlockCaret != false {
      try visitor.visitSingularBoolField(value: self.isSameBlockCaret, fieldNumber: 4)
    }
    try {
        if let v = self._event {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
    }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.Paste.Response, rhs: Anytype_Rpc.Block.Paste.Response) -> Bool {
    if lhs._error != rhs._error {
        return false
    }
    if lhs.blockIds != rhs.blockIds {
        return false
    }
    if lhs.caretPosition != rhs.caretPosition {
        return false
    }
    if lhs.isSameBlockCaret != rhs.isSameBlockCaret {
        return false
    }
    if lhs._event != rhs._event {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Block.Paste.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularEnumField(value: &self.code)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.description_p)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Block.Paste.Response.Error, rhs: Anytype_Rpc.Block.Paste.Response.Error) -> Bool {
    if lhs.code != rhs.code {
        return false
    }
    if lhs.description_p != rhs.description_p {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Block.Paste.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
  ]
}