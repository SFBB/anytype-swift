// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.Account.NetworkMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Rpc.Account.NetworkMode] = [
    .defaultConfig,
    .localOnly,
    .customConfig,
  ]
}

extension Anytype_Rpc.Publishing.PublishStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Rpc.Publishing.PublishStatus] = [
    .created,
    .published,
  ]
}

extension Anytype_Rpc.Navigation.Context: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Rpc.Navigation.Context] = [
    .navigation,
    .moveTo,
    .linkTo,
  ]
}
extension Anytype_Rpc: @unchecked Sendable {
}
extension Anytype_Rpc.Account.NetworkMode: @unchecked Sendable {
}
extension Anytype_Rpc.Publishing.PublishStatus: @unchecked Sendable {
}
extension Anytype_Rpc.Navigation.Context: @unchecked Sendable {
}
extension Anytype_Empty: @unchecked Sendable {
}
extension Anytype_StreamRequest: @unchecked Sendable {
}

// MARK: - Extension support defined in commands.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  public var Anytype_noAuth: Bool {
    get {
        return getExtensionValue(ext: Anytype_Extensions_no_auth) ?? false
    }
    set {
        setExtensionValue(ext: Anytype_Extensions_no_auth, value: newValue)
    }
  }
  /// Returns true if extension `Anytype_Extensions_no_auth`
  /// has been explicitly set.
  public var hasAnytype_noAuth: Bool {
    return hasExtensionValue(ext: Anytype_Extensions_no_auth)
  }
  /// Clears the value of extension `Anytype_Extensions_no_auth`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearAnytype_noAuth() {
    clearExtensionValue(ext: Anytype_Extensions_no_auth)
  }

}

// MARK: - File's ExtensionMap: Anytype_Commands_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Anytype_Commands_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Anytype_Extensions_no_auth
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

public let Anytype_Extensions_no_auth = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 7777,
  fieldName: "anytype.no_auth"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Rpc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Rpc"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc, rhs: Anytype_Rpc) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Account.NetworkMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DefaultConfig"),
    1: .same(proto: "LocalOnly"),
    2: .same(proto: "CustomConfig"),
  ]
}

extension Anytype_Rpc.Publishing.PublishStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PublishStatusCreated"),
    1: .same(proto: "PublishStatusPublished"),
  ]
}

extension Anytype_Rpc.Navigation.Context: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Navigation"),
    1: .same(proto: "MoveTo"),
    2: .same(proto: "LinkTo"),
  ]
}

extension Anytype_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Empty"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Empty, rhs: Anytype_Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_StreamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularStringField(value: &self.token)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_StreamRequest, rhs: Anytype_StreamRequest) -> Bool {
    if lhs.token != rhs.token {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}