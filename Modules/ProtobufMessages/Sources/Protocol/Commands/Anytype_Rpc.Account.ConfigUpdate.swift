// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.Account {
    public struct ConfigUpdate {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum Timezones: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case gmt // = 0
        case ect // = 1
        case eet // = 2
        case eat // = 3
        case met // = 4
        case net // = 5
        case plt // = 6
        case ist // = 7
        case bst // = 8
        case vst // = 9
        case ctt // = 10
        case jst // = 11
        case act // = 12
        case aet // = 13
        case sst // = 14
        case nst // = 15
        case mit // = 16
        case hst // = 17
        case ast // = 18
        case pst // = 19
        case mst // = 20
        case cst // = 21
        case iet // = 22
        case prt // = 23
        case cnt // = 24
        case bet // = 25
        case brt // = 26
        case cat // = 27
        case UNRECOGNIZED(Int)

        public init() {
          self = .gmt
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .gmt
          case 1: self = .ect
          case 2: self = .eet
          case 3: self = .eat
          case 4: self = .met
          case 5: self = .net
          case 6: self = .plt
          case 7: self = .ist
          case 8: self = .bst
          case 9: self = .vst
          case 10: self = .ctt
          case 11: self = .jst
          case 12: self = .act
          case 13: self = .aet
          case 14: self = .sst
          case 15: self = .nst
          case 16: self = .mit
          case 17: self = .hst
          case 18: self = .ast
          case 19: self = .pst
          case 20: self = .mst
          case 21: self = .cst
          case 22: self = .iet
          case 23: self = .prt
          case 24: self = .cnt
          case 25: self = .bet
          case 26: self = .brt
          case 27: self = .cat
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .gmt: return 0
          case .ect: return 1
          case .eet: return 2
          case .eat: return 3
          case .met: return 4
          case .net: return 5
          case .plt: return 6
          case .ist: return 7
          case .bst: return 8
          case .vst: return 9
          case .ctt: return 10
          case .jst: return 11
          case .act: return 12
          case .aet: return 13
          case .sst: return 14
          case .nst: return 15
          case .mit: return 16
          case .hst: return 17
          case .ast: return 18
          case .pst: return 19
          case .mst: return 20
          case .cst: return 21
          case .iet: return 22
          case .prt: return 23
          case .cnt: return 24
          case .bet: return 25
          case .brt: return 26
          case .cat: return 27
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var ipfsstorageAddr: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var error: Anytype_Rpc.Account.ConfigUpdate.Response.Error {
          get {return _error ?? Anytype_Rpc.Account.ConfigUpdate.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {self._error = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Account.ConfigUpdate.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case accountIsNotRunning // = 101
            case failedToWriteConfig // = 102
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .accountIsNotRunning
              case 102: self = .failedToWriteConfig
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .accountIsNotRunning: return 101
              case .failedToWriteConfig: return 102
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          public init() {}
        }

        public init() {}

        fileprivate var _error: Anytype_Rpc.Account.ConfigUpdate.Response.Error? = nil
      }

      public init() {}
    }    }

extension Anytype_Rpc.Account.ConfigUpdate.Timezones: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Rpc.Account.ConfigUpdate.Timezones] = [
    .gmt,
    .ect,
    .eet,
    .eat,
    .met,
    .net,
    .plt,
    .ist,
    .bst,
    .vst,
    .ctt,
    .jst,
    .act,
    .aet,
    .sst,
    .nst,
    .mit,
    .hst,
    .ast,
    .pst,
    .mst,
    .cst,
    .iet,
    .prt,
    .cnt,
    .bet,
    .brt,
    .cat,
  ]
}

extension Anytype_Rpc.Account.ConfigUpdate.Response.Error.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Anytype_Rpc.Account.ConfigUpdate.Response.Error.Code] = [
    .null,
    .unknownError,
    .badInput,
    .accountIsNotRunning,
    .failedToWriteConfig,
  ]
}
extension Anytype_Rpc.Account.ConfigUpdate: @unchecked Sendable {}
extension Anytype_Rpc.Account.ConfigUpdate.Timezones: @unchecked Sendable {}
extension Anytype_Rpc.Account.ConfigUpdate.Request: @unchecked Sendable {}
extension Anytype_Rpc.Account.ConfigUpdate.Response: @unchecked Sendable {}
extension Anytype_Rpc.Account.ConfigUpdate.Response.Error: @unchecked Sendable {}
extension Anytype_Rpc.Account.ConfigUpdate.Response.Error.Code: @unchecked Sendable {}

extension Anytype_Rpc.Account.ConfigUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.protoMessageName + ".ConfigUpdate"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.ConfigUpdate, rhs: Anytype_Rpc.Account.ConfigUpdate) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.ConfigUpdate.Timezones: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GMT"),
    1: .same(proto: "ECT"),
    2: .same(proto: "EET"),
    3: .same(proto: "EAT"),
    4: .same(proto: "MET"),
    5: .same(proto: "NET"),
    6: .same(proto: "PLT"),
    7: .same(proto: "IST"),
    8: .same(proto: "BST"),
    9: .same(proto: "VST"),
    10: .same(proto: "CTT"),
    11: .same(proto: "JST"),
    12: .same(proto: "ACT"),
    13: .same(proto: "AET"),
    14: .same(proto: "SST"),
    15: .same(proto: "NST"),
    16: .same(proto: "MIT"),
    17: .same(proto: "HST"),
    18: .same(proto: "AST"),
    19: .same(proto: "PST"),
    20: .same(proto: "MST"),
    21: .same(proto: "CST"),
    22: .same(proto: "IET"),
    23: .same(proto: "PRT"),
    24: .same(proto: "CNT"),
    25: .same(proto: "BET"),
    26: .same(proto: "BRT"),
    27: .same(proto: "CAT"),
  ]
}

extension Anytype_Rpc.Account.ConfigUpdate.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.ConfigUpdate.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "IPFSStorageAddr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.ipfsstorageAddr) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ipfsstorageAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.ipfsstorageAddr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.ConfigUpdate.Request, rhs: Anytype_Rpc.Account.ConfigUpdate.Request) -> Bool {
    if lhs.ipfsstorageAddr != rhs.ipfsstorageAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.ConfigUpdate.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.ConfigUpdate.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.ConfigUpdate.Response, rhs: Anytype_Rpc.Account.ConfigUpdate.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.ConfigUpdate.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.ConfigUpdate.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.ConfigUpdate.Response.Error, rhs: Anytype_Rpc.Account.ConfigUpdate.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.ConfigUpdate.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    101: .same(proto: "ACCOUNT_IS_NOT_RUNNING"),
    102: .same(proto: "FAILED_TO_WRITE_CONFIG"),
  ]
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
