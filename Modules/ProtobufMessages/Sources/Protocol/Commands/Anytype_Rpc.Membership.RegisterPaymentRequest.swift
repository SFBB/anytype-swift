// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public extension Anytype_Rpc.Membership {
    public struct RegisterPaymentRequest {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var requestedTier: UInt32 = 0

        public var paymentMethod: Anytype_Model_Membership.PaymentMethod = .methodNone

        /// if empty - then no name requested
        /// if non-empty - PP node will register that name on behalf of the user
        public var nsName: String = String()

        public var nsNameType: Anytype_Model_NameserviceNameType = .anyName

        /// for some tiers and payment methods (like crypto) we need an e-mail
        /// please get if either from:
        /// 1. Membership.GetStatus() -> anytype.model.Membership.userEmail field
        /// 2. Ask user from the UI
        public var userEmail: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {
            }
      }

      public struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var error: Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error {
          get {
                  return _error ?? Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error()
              }
          set {
                  _error = newValue
              }
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {
                return self._error != nil
            }
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {
                self._error = nil
            }

        /// will feature current billing ID
        /// stripe.com/?client_reference_id=1234
        public var paymentURL: String = String()

        /// billingID is only needed for mobile clients
        public var billingID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case notLoggedIn // = 3
            case paymentNodeError // = 4
            case cacheError // = 5
            case tierNotFound // = 6
            case tierInvalid // = 7
            case paymentMethodInvalid // = 8
            case badAnyname // = 9
            case membershipAlreadyExists // = 10
            case canNotConnect // = 11

            /// for tiers and payment methods that require that
            case emailWrongFormat // = 12
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0:
                      self = .null
              case 1:
                      self = .unknownError
              case 2:
                      self = .badInput
              case 3:
                      self = .notLoggedIn
              case 4:
                      self = .paymentNodeError
              case 5:
                      self = .cacheError
              case 6:
                      self = .tierNotFound
              case 7:
                      self = .tierInvalid
              case 8:
                      self = .paymentMethodInvalid
              case 9:
                      self = .badAnyname
              case 10:
                      self = .membershipAlreadyExists
              case 11:
                      self = .canNotConnect
              case 12:
                      self = .emailWrongFormat
              default:
                      self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null:
                      return 0
              case .unknownError:
                      return 1
              case .badInput:
                      return 2
              case .notLoggedIn:
                      return 3
              case .paymentNodeError:
                      return 4
              case .cacheError:
                      return 5
              case .tierNotFound:
                      return 6
              case .tierInvalid:
                      return 7
              case .paymentMethodInvalid:
                      return 8
              case .badAnyname:
                      return 9
              case .membershipAlreadyExists:
                      return 10
              case .canNotConnect:
                      return 11
              case .emailWrongFormat:
                      return 12
              case .UNRECOGNIZED(let i):
                      return i
              }
            }

          }

          public init() {
              }
        }

        public init() {
            }

        fileprivate var _error: Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error? = nil
      }

      public init() {
          }
    }
}

extension Anytype_Rpc.Membership.RegisterPaymentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Membership.protoMessageName + ".RegisterPaymentRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Membership.RegisterPaymentRequest, rhs: Anytype_Rpc.Membership.RegisterPaymentRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Membership.RegisterPaymentRequest.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Membership.RegisterPaymentRequest.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requestedTier"),
    2: .same(proto: "paymentMethod"),
    3: .same(proto: "nsName"),
    4: .same(proto: "nsNameType"),
    5: .same(proto: "userEmail"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularUInt32Field(value: &self.requestedTier)
          }()
      case 2:
          try {
              try decoder.decodeSingularEnumField(value: &self.paymentMethod)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.nsName)
          }()
      case 4:
          try {
              try decoder.decodeSingularEnumField(value: &self.nsNameType)
          }()
      case 5:
          try {
              try decoder.decodeSingularStringField(value: &self.userEmail)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requestedTier != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestedTier, fieldNumber: 1)
    }
    if self.paymentMethod != .methodNone {
      try visitor.visitSingularEnumField(value: self.paymentMethod, fieldNumber: 2)
    }
    if !self.nsName.isEmpty {
      try visitor.visitSingularStringField(value: self.nsName, fieldNumber: 3)
    }
    if self.nsNameType != .anyName {
      try visitor.visitSingularEnumField(value: self.nsNameType, fieldNumber: 4)
    }
    if !self.userEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.userEmail, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Membership.RegisterPaymentRequest.Request, rhs: Anytype_Rpc.Membership.RegisterPaymentRequest.Request) -> Bool {
    if lhs.requestedTier != rhs.requestedTier {
        return false
    }
    if lhs.paymentMethod != rhs.paymentMethod {
        return false
    }
    if lhs.nsName != rhs.nsName {
        return false
    }
    if lhs.nsNameType != rhs.nsNameType {
        return false
    }
    if lhs.userEmail != rhs.userEmail {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Membership.RegisterPaymentRequest.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Membership.RegisterPaymentRequest.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "paymentUrl"),
    3: .same(proto: "billingId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularMessageField(value: &self._error)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.paymentURL)
          }()
      case 3:
          try {
              try decoder.decodeSingularStringField(value: &self.billingID)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try {
        if let v = self._error {
              try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
    }()
    if !self.paymentURL.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentURL, fieldNumber: 2)
    }
    if !self.billingID.isEmpty {
      try visitor.visitSingularStringField(value: self.billingID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Membership.RegisterPaymentRequest.Response, rhs: Anytype_Rpc.Membership.RegisterPaymentRequest.Response) -> Bool {
    if lhs._error != rhs._error {
        return false
    }
    if lhs.paymentURL != rhs.paymentURL {
        return false
    }
    if lhs.billingID != rhs.billingID {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Membership.RegisterPaymentRequest.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1:
          try {
              try decoder.decodeSingularEnumField(value: &self.code)
          }()
      case 2:
          try {
              try decoder.decodeSingularStringField(value: &self.description_p)
          }()
      default:
          break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error, rhs: Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error) -> Bool {
    if lhs.code != rhs.code {
        return false
    }
    if lhs.description_p != rhs.description_p {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}

extension Anytype_Rpc.Membership.RegisterPaymentRequest.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    3: .same(proto: "NOT_LOGGED_IN"),
    4: .same(proto: "PAYMENT_NODE_ERROR"),
    5: .same(proto: "CACHE_ERROR"),
    6: .same(proto: "TIER_NOT_FOUND"),
    7: .same(proto: "TIER_INVALID"),
    8: .same(proto: "PAYMENT_METHOD_INVALID"),
    9: .same(proto: "BAD_ANYNAME"),
    10: .same(proto: "MEMBERSHIP_ALREADY_EXISTS"),
    11: .same(proto: "CAN_NOT_CONNECT"),
    12: .same(proto: "EMAIL_WRONG_FORMAT"),
  ]
}