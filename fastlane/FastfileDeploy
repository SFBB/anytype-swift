default_platform(:ios)

platform :ios do

  lane :release_dev do
    deploy(config: ENV["APP_CONF_DEVELOP"])
  end

  lane :release_anytype do
    deploy(config: ENV["APP_CONF_RELEASE_ANYTYPE"])
  end

  lane :release_anyapp do
    deploy(config: ENV["APP_CONF_RELEASE_ANYAPP"])
  end

  # Private lanes

  private_lane :deploy do |options| 
    
    config_settings = {
      ENV["APP_CONF_DEVELOP"] => {
        tag_prefix: "dev",
        add_badge: true,
        app_info: "Debug"
      },
      ENV["APP_CONF_RELEASE_ANYTYPE"] => => {
        tag_prefix: "release/anytype",
        add_badge: false,
        app_info: "Release Anytype"
      },
      ENV["APP_CONF_RELEASE_ANYAPP"] => {
        tag_prefix: "release/anyapp",
        add_badge: false,
        app_info: "Release Any App"
      },
    }

    setup_ci
    match(readonly: true)

    set_api_key

    config = options[:configs]
    
    settings = config_settings[config]

    puts "Start Build: #{config}"
    
    if setting[:add_badge]
      add_badge(
        shield: "#{version}-#{build_number}-blue",
        no_badge: true
      )
    end
    
    build_app(
      scheme: ENV["APP_TARGET"], 
      configuration: config,
      include_symbols: true,
      use_system_scm: true,
      archive_path: "./build/archive",
      output_directory: "./build/result",
      xcargs: ENV['BUILD_OPTIONS'],
      cloned_source_packages_path: ENV['SPM_DERIVED_DATA']
    )

    # Reset icon/info.plist changes
    reset_git_repo(skip_clean: true)
  
    prefix = setting[:tag_prefix]
    tag_name = "#{prefix}/#{version}/#{build_number}"
    add_git_tag(
      tag: tag_name,
      force: true
    )

    push_to_git_remote(no_verify: true)
  
    appInfo = setting[:app_info]
    old_tag_name = sh("git describe --first-parent --tags --abbrev=0 HEAD~").chomp
    
    add_linear_comment(
      from_tag: old_tag_name,
      to_tag: tag_name,
      comment: "Implemented in **#{appInfo}** `#{version}(#{build_number})`. This comment was created automatically."
    )
  
    upload_to_testflight(skip_waiting_for_build_processing: true)

    message = "Anytype #{appInfo} Version: **#{version}(#{build_number})** :gem::gem::gem:"
    sh("echo FASTLANE_SUMMARY='#{message}' >> $GITHUB_ENV")

    upload_dsyms_to_sentry

  end
  
  private_lane :upload_dsyms_to_sentry do |options|

    sentry_upload_dif(
      url: 'https://sentry.anytype.io',
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: 'anytype',
      project_slug: 'ios',
      path: "./build/result"
    )
  end

end
